//	Do not edit. MakeTypeDesc.bat will update this file.
	
	CRBodyDesc* pCRBodyDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRBodyDesc");
	desc->size = sizeof(CRBodyDesc);
	desc->ifInfo = CRBodyIf::GetIfInfoStatic();
	((IfInfo*)CRBodyIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRBodyDesc>;
	field = desc->AddField("CRCreatureJointOrder", "enum", "jointOrder",  "");
	field->AddEnumConst("SOCKET_PARENT");
	field->AddEnumConst("PLUG_PARENT");
	field->offset = int((char*)(&pCRBodyDesc->jointOrder) - (char*)pCRBodyDesc);
	db->RegisterDesc(desc);
	
	CRHingeHumanBodyDesc* pCRHingeHumanBodyDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRHingeHumanBodyDesc");
	desc->size = sizeof(CRHingeHumanBodyDesc);
	desc->ifInfo = CRHingeHumanBodyIf::GetIfInfoStatic();
	((IfInfo*)CRHingeHumanBodyIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRHingeHumanBodyDesc>;
	field = desc->AddBase("CRBodyDesc");
	field->offset = int((char*)(CRBodyDesc*)pCRHingeHumanBodyDesc - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "waistHeight", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->waistHeight) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "waistBreadth", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->waistBreadth) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "waistThickness", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->waistThickness) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "abdomenHeight", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->abdomenHeight) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "abdomenBreadth", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->abdomenBreadth) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "abdomenThickness", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->abdomenThickness) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "chestHeight", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->chestHeight) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "chestBreadth", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->chestBreadth) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "chestThickness", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->chestThickness) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "neckLength", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->neckLength) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "neckDiameter", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->neckDiameter) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "headDiameter", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->headDiameter) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "upperArmLength", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->upperArmLength) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "upperArmDiameter", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->upperArmDiameter) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "lowerArmLength", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->lowerArmLength) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "lowerArmDiameter", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->lowerArmDiameter) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "handLength", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->handLength) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "handBreadth", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->handBreadth) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "handThickness", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->handThickness) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "upperLegLength", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->upperLegLength) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "upperLegDiameter", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->upperLegDiameter) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "interLegDistance", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->interLegDistance) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "lowerLegLength", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->lowerLegLength) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "lowerLegDiameter", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->lowerLegDiameter) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "footLength", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->footLength) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "footBreadth", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->footBreadth) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "footThickness", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->footThickness) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "ankleToeDistance", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->ankleToeDistance) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "vertexToEyeHeight", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->vertexToEyeHeight) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "occiputToEyeDistance", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->occiputToEyeDistance) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "eyeDiameter", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->eyeDiameter) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "interpupillaryBreadth", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->interpupillaryBreadth) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springWaistAbdomen", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springWaistAbdomen) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperWaistAbdomen", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperWaistAbdomen) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springAbdomenChest", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springAbdomenChest) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperAbdomenChest", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperAbdomenChest) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springChestNeckX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springChestNeckX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperChestNeckX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperChestNeckX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springChestNeckY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springChestNeckY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperChestNeckY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperChestNeckY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springChestNeckZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springChestNeckZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperChestNeckZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperChestNeckZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springNeckHeadX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springNeckHeadX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperNeckHeadX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperNeckHeadX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springNeckHeadZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springNeckHeadZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperNeckHeadZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperNeckHeadZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springShoulderZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springShoulderZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperShoulderZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperShoulderZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springShoulderX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springShoulderX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperShoulderX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperShoulderX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springShoulderY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springShoulderY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperShoulderY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperShoulderY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springElbow", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springElbow) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperElbow", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperElbow) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springWristY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springWristY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperWristY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperWristY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springWristX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springWristX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperWristX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperWristX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springWristZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springWristZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperWristZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperWristZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springWaistLegZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springWaistLegZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperWaistLegZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperWaistLegZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springWaistLegX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springWaistLegX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperWaistLegX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperWaistLegX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springWaistLegY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springWaistLegY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperWaistLegY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperWaistLegY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springKnee", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springKnee) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperKnee", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperKnee) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springAnkleY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springAnkleY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperAnkleY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperAnkleY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springAnkleX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springAnkleX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperAnkleX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperAnkleX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springAnkleZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springAnkleZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperAnkleZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperAnkleZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springEyeY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springEyeY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperEyeY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperEyeY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "springEyeX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->springEyeX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "double", "damperEyeX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->damperEyeX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec3d", "posRightUpperArm", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->posRightUpperArm) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriRightUpperArm", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->oriRightUpperArm) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriRightLowerArm", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->oriRightLowerArm) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriRightHand", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->oriRightHand) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWaistAbdomen", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeWaistAbdomen) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeAbdomenChest", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeAbdomenChest) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeChestNeckX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeChestNeckX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeChestNeckY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeChestNeckY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeChestNeckZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeChestNeckZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeNeckHeadX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeNeckHeadX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeNeckHeadZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeNeckHeadZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeShoulderZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeShoulderZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeShoulderX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeShoulderX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeShoulderY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeShoulderY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeElbow", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeElbow) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWristY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeWristY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWristX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeWristX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWristZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeWristZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWaistLegZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeWaistLegZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWaistLegX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeWaistLegX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWaistLegY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeWaistLegY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeKnee", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeKnee) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeAnkleY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeAnkleY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeAnkleX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeAnkleX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeAnkleZ", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeAnkleZ) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeRightEyeY", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeRightEyeY) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeEyeX", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->rangeEyeX) - (char*)pCRHingeHumanBodyDesc);
	field = desc->AddField("", "bool", "noLegs", "");
	field->offset = int((char*)&(pCRHingeHumanBodyDesc->noLegs) - (char*)pCRHingeHumanBodyDesc);
	db->RegisterDesc(desc);
	
	CRHingeAnimalBodyDesc* pCRHingeAnimalBodyDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRHingeAnimalBodyDesc");
	desc->size = sizeof(CRHingeAnimalBodyDesc);
	desc->ifInfo = CRHingeAnimalBodyIf::GetIfInfoStatic();
	((IfInfo*)CRHingeAnimalBodyIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRHingeAnimalBodyDesc>;
	field = desc->AddBase("CRBodyDesc");
	field->offset = int((char*)(CRBodyDesc*)pCRHingeAnimalBodyDesc - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "waistBreadth", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->waistBreadth) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "waistHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->waistHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "waistThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->waistThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "chestBreadth", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->chestBreadth) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "chestHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->chestHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "chestThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->chestThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "tailBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->tailBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "tailHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->tailHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "tailThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->tailThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "neckBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->neckBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "neckHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->neckHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "neckThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->neckThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "headBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->headBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "headHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->headHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "headThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->headThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "breathtboneBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->breathtboneBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "breathtboneHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->breathtboneHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "breathtboneThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->breathtboneThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "radiusBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->radiusBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "radiusHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->radiusHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "radiusThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->radiusThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "frontCannonBoneBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->frontCannonBoneBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "frontCannonBoneHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->frontCannonBoneHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "frontCannonBoneThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->frontCannonBoneThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "frontToeBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->frontToeBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "frontToeHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->frontToeHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "frontToeThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->frontToeThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "femurBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->femurBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "femurHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->femurHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "femurThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->femurThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "tibiaBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->tibiaBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "tibiaHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->tibiaHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "tibiaThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->tibiaThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rearCannonBoneBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rearCannonBoneBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rearCannonBoneHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rearCannonBoneHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rearCannonBoneThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rearCannonBoneThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rearToeBreath", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rearToeBreath) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rearToeHeight", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rearToeHeight) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rearToeThickness", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rearToeThickness) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springWaistChest", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springWaistChest) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperWaistChest", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperWaistChest) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springWaistTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springWaistTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperWaistTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperWaistTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springChestNeck", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springChestNeck) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperChestNeck", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperChestNeck) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springNeckHead", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springNeckHead) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperNeckHead", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperNeckHead) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springShoulder", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springShoulder) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperShoulder", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperShoulder) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springElbow", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springElbow) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperElbow", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperElbow) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springFrontKnee", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springFrontKnee) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperFrontKnee", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperFrontKnee) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springFrontAnkle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springFrontAnkle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperFrontAnkle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperFrontAnkle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springHip", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springHip) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperHip", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperHip) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springStifle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springStifle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperStifle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperStifle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springRearKnee", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springRearKnee) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperRearKnee", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperRearKnee) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "springRearAnkle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->springRearAnkle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "damperRearAnkle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->damperRearAnkle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeElbow", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeElbow) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeFrontKnee", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeFrontKnee) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeStifle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeStifle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeRearKnee", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeRearKnee) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriWaistChest", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriWaistChest) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriWaistTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriWaistTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriChestNeck", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriChestNeck) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriNeckHead", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriNeckHead) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriShoulder", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriShoulder) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriFrontAnkle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriFrontAnkle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriHip", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriHip) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Quaterniond", "oriRearAnkle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->oriRearAnkle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeWaistChest", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeWaistChest) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeWaistTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeWaistTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeChestNeck", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeChestNeck) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeNeckHead", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeNeckHead) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeShoulder", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeShoulder) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeFrontAnkle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeFrontAnkle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeHip", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeHip) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "double", "rangeRearAnkle", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeRearAnkle) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeTwistWaistChest", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeTwistWaistChest) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeTwistWaistTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeTwistWaistTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeTwistTail", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeTwistTail) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeTwistChestNeck", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeTwistChestNeck) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeTwistNeckHead", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->rangeTwistNeckHead) - (char*)pCRHingeAnimalBodyDesc);
	field = desc->AddField("", "bool", "noLegs", "");
	field->offset = int((char*)&(pCRHingeAnimalBodyDesc->noLegs) - (char*)pCRHingeAnimalBodyDesc);
	db->RegisterDesc(desc);
	
	CRTrunkFootHumanBodyDesc* pCRTrunkFootHumanBodyDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRTrunkFootHumanBodyDesc");
	desc->size = sizeof(CRTrunkFootHumanBodyDesc);
	desc->ifInfo = CRTrunkFootHumanBodyIf::GetIfInfoStatic();
	((IfInfo*)CRTrunkFootHumanBodyIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRTrunkFootHumanBodyDesc>;
	field = desc->AddBase("CRBodyDesc");
	field->offset = int((char*)(CRBodyDesc*)pCRTrunkFootHumanBodyDesc - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "waistHeight", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->waistHeight) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "waistBreadth", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->waistBreadth) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "waistThickness", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->waistThickness) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "chestHeight", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->chestHeight) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "chestBreadth", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->chestBreadth) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "chestThickness", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->chestThickness) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "neckLength", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->neckLength) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "headDiameter", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->headDiameter) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "footLength", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->footLength) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "footBreadth", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->footBreadth) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "footThickness", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->footThickness) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "springWaistChest", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->springWaistChest) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "damperWaistChest", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->damperWaistChest) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "springChestHead", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->springChestHead) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "double", "damperChestHead", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->damperChestHead) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWaistChest", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->rangeWaistChest) - (char*)pCRTrunkFootHumanBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeChestHead", "");
	field->offset = int((char*)&(pCRTrunkFootHumanBodyDesc->rangeChestHead) - (char*)pCRTrunkFootHumanBodyDesc);
	db->RegisterDesc(desc);
	
	CRTrunkFootAnimalBodyDesc* pCRTrunkFootAnimalBodyDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRTrunkFootAnimalBodyDesc");
	desc->size = sizeof(CRTrunkFootAnimalBodyDesc);
	desc->ifInfo = CRTrunkFootAnimalBodyIf::GetIfInfoStatic();
	((IfInfo*)CRTrunkFootAnimalBodyIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRTrunkFootAnimalBodyDesc>;
	field = desc->AddBase("CRBodyDesc");
	field->offset = int((char*)(CRBodyDesc*)pCRTrunkFootAnimalBodyDesc - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "waistHeight", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->waistHeight) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "waistBreadth", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->waistBreadth) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "waistThickness", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->waistThickness) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "chestHeight", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->chestHeight) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "chestBreadth", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->chestBreadth) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "chestThickness", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->chestThickness) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "neckLength", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->neckLength) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "headDiameter", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->headDiameter) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "footLength", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->footLength) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "footBreadth", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->footBreadth) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "footThickness", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->footThickness) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "springWaistChest", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->springWaistChest) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "damperWaistChest", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->damperWaistChest) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "springChestHead", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->springChestHead) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "double", "damperChestHead", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->damperChestHead) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeWaistChest", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->rangeWaistChest) - (char*)pCRTrunkFootAnimalBodyDesc);
	field = desc->AddField("", "Vec2d", "rangeChestHead", "");
	field->offset = int((char*)&(pCRTrunkFootAnimalBodyDesc->rangeChestHead) - (char*)pCRTrunkFootAnimalBodyDesc);
	db->RegisterDesc(desc);
	
	CRControllerDesc* pCRControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRControllerDesc");
	desc->size = sizeof(CRControllerDesc);
	desc->ifInfo = CRControllerIf::GetIfInfoStatic();
	((IfInfo*)CRControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRControllerDesc>;
	db->RegisterDesc(desc);
	
	CREyeControllerState* pCREyeControllerState = NULL;
	desc = DBG_NEW UTTypeDesc("CREyeControllerState");
	desc->size = sizeof(CREyeControllerState);
	desc->access = DBG_NEW UTAccess<CREyeControllerState>;
	field = desc->AddField("ControlState", "enum", "controlState",  "");
	field->AddEnumConst("CS_SACCADE");
	field->AddEnumConst("CS_PURSUIT");
	field->offset = int((char*)(&pCREyeControllerState->controlState) - (char*)pCREyeControllerState);
	db->RegisterDesc(desc);
	
	CREyeControllerDesc* pCREyeControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CREyeControllerDesc");
	desc->size = sizeof(CREyeControllerDesc);
	desc->ifInfo = CREyeControllerIf::GetIfInfoStatic();
	((IfInfo*)CREyeControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CREyeControllerDesc>;
	field = desc->AddBase("CREyeControllerState");
	field->offset = int((char*)(CREyeControllerState*)pCREyeControllerDesc - (char*)pCREyeControllerDesc);
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCREyeControllerDesc - (char*)pCREyeControllerDesc);
	db->RegisterDesc(desc);
	
	CRNeckControllerState* pCRNeckControllerState = NULL;
	desc = DBG_NEW UTTypeDesc("CRNeckControllerState");
	desc->size = sizeof(CRNeckControllerState);
	desc->access = DBG_NEW UTAccess<CRNeckControllerState>;
	db->RegisterDesc(desc);
	
	CRNeckControllerDesc* pCRNeckControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRNeckControllerDesc");
	desc->size = sizeof(CRNeckControllerDesc);
	desc->ifInfo = CRNeckControllerIf::GetIfInfoStatic();
	((IfInfo*)CRNeckControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRNeckControllerDesc>;
	field = desc->AddBase("CRNeckControllerState");
	field->offset = int((char*)(CRNeckControllerState*)pCRNeckControllerDesc - (char*)pCRNeckControllerDesc);
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCRNeckControllerDesc - (char*)pCRNeckControllerDesc);
	field = desc->AddField("", "float", "lowerAttractiveness", "");
	field->offset = int((char*)&(pCRNeckControllerDesc->lowerAttractiveness) - (char*)pCRNeckControllerDesc);
	field = desc->AddField("", "float", "upperAttractiveness", "");
	field->offset = int((char*)&(pCRNeckControllerDesc->upperAttractiveness) - (char*)pCRNeckControllerDesc);
	db->RegisterDesc(desc);
	
	CRReachingControllerDesc* pCRReachingControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRReachingControllerDesc");
	desc->size = sizeof(CRReachingControllerDesc);
	desc->ifInfo = CRReachingControllerIf::GetIfInfoStatic();
	((IfInfo*)CRReachingControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRReachingControllerDesc>;
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCRReachingControllerDesc - (char*)pCRReachingControllerDesc);
	field = desc->AddField("pointer", "PHSolidIf", "solid", "");
	field->offset = int((char*)&(pCRReachingControllerDesc->solid) - (char*)pCRReachingControllerDesc);
	field = desc->AddField("", "Vec3f", "reachPos", "");
	field->offset = int((char*)&(pCRReachingControllerDesc->reachPos) - (char*)pCRReachingControllerDesc);
	field = desc->AddField("", "Quaterniond", "fixOri", "");
	field->offset = int((char*)&(pCRReachingControllerDesc->fixOri) - (char*)pCRReachingControllerDesc);
	field = desc->AddField("", "float", "limitForce", "");
	field->offset = int((char*)&(pCRReachingControllerDesc->limitForce) - (char*)pCRReachingControllerDesc);
	field = desc->AddField("", "float", "springPos", "");
	field->offset = int((char*)&(pCRReachingControllerDesc->springPos) - (char*)pCRReachingControllerDesc);
	field = desc->AddField("", "float", "damperPos", "");
	field->offset = int((char*)&(pCRReachingControllerDesc->damperPos) - (char*)pCRReachingControllerDesc);
	field = desc->AddField("", "float", "springOri", "");
	field->offset = int((char*)&(pCRReachingControllerDesc->springOri) - (char*)pCRReachingControllerDesc);
	field = desc->AddField("", "float", "damperOri", "");
	field->offset = int((char*)&(pCRReachingControllerDesc->damperOri) - (char*)pCRReachingControllerDesc);
	db->RegisterDesc(desc);
	
	CRGazeControllerState* pCRGazeControllerState = NULL;
	desc = DBG_NEW UTTypeDesc("CRGazeControllerState");
	desc->size = sizeof(CRGazeControllerState);
	desc->access = DBG_NEW UTAccess<CRGazeControllerState>;
	db->RegisterDesc(desc);
	
	CRGazeControllerDesc* pCRGazeControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRGazeControllerDesc");
	desc->size = sizeof(CRGazeControllerDesc);
	desc->ifInfo = CRGazeControllerIf::GetIfInfoStatic();
	((IfInfo*)CRGazeControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRGazeControllerDesc>;
	field = desc->AddBase("CRGazeControllerState");
	field->offset = int((char*)(CRGazeControllerState*)pCRGazeControllerDesc - (char*)pCRGazeControllerDesc);
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCRGazeControllerDesc - (char*)pCRGazeControllerDesc);
	db->RegisterDesc(desc);
	
	CRAttentionControllerDesc* pCRAttentionControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRAttentionControllerDesc");
	desc->size = sizeof(CRAttentionControllerDesc);
	desc->ifInfo = CRAttentionControllerIf::GetIfInfoStatic();
	((IfInfo*)CRAttentionControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRAttentionControllerDesc>;
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCRAttentionControllerDesc - (char*)pCRAttentionControllerDesc);
	db->RegisterDesc(desc);
	
	CRWalkingControllerDesc* pCRWalkingControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRWalkingControllerDesc");
	desc->size = sizeof(CRWalkingControllerDesc);
	desc->ifInfo = CRWalkingControllerIf::GetIfInfoStatic();
	((IfInfo*)CRWalkingControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRWalkingControllerDesc>;
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCRWalkingControllerDesc - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "paramLdx", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->paramLdx) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "paramLdz", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->paramLdz) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "maxHalfStride", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->maxHalfStride) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "height", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->height) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "minCycleRate", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->minCycleRate) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "maxDSRate", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->maxDSRate) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "FootLength", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->FootLength) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxFootLength", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxFootLength) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MinFootLength", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MinFootLength) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxRoGround", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxRoGround) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxRoLandingSiteFront", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxRoLandingSiteFront) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxRoLandingSiteSide", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxRoLandingSiteSide) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxRoLandingSiteBack", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxRoLandingSiteBack) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxRoConstraint", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxRoConstraint) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxFootSpeedFront", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxFootSpeedFront) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxFootSpeedSide", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxFootSpeedSide) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxFootSpeedBack", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxFootSpeedBack) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxFootAccelerationFront", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxFootAccelerationFront) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxFootAccelerationSide", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxFootAccelerationSide) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "MaxFootAccelerationBack", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->MaxFootAccelerationBack) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "DoubleSupportLimitRate", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->DoubleSupportLimitRate) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "LimitChange", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->LimitChange) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "pi", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->pi) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "footsize", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->footsize) - (char*)pCRWalkingControllerDesc);
	field = desc->AddField("", "double", "miu", "");
	field->offset = int((char*)&(pCRWalkingControllerDesc->miu) - (char*)pCRWalkingControllerDesc);
	db->RegisterDesc(desc);
	
	CREseWalkingControllerDesc* pCREseWalkingControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CREseWalkingControllerDesc");
	desc->size = sizeof(CREseWalkingControllerDesc);
	desc->ifInfo = CREseWalkingControllerIf::GetIfInfoStatic();
	((IfInfo*)CREseWalkingControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CREseWalkingControllerDesc>;
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCREseWalkingControllerDesc - (char*)pCREseWalkingControllerDesc);
	db->RegisterDesc(desc);
	
	CRTravelControllerDesc* pCRTravelControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRTravelControllerDesc");
	desc->size = sizeof(CRTravelControllerDesc);
	desc->ifInfo = CRTravelControllerIf::GetIfInfoStatic();
	((IfInfo*)CRTravelControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRTravelControllerDesc>;
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCRTravelControllerDesc - (char*)pCRTravelControllerDesc);
	db->RegisterDesc(desc);
	
	CRGrabControllerDesc* pCRGrabControllerDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRGrabControllerDesc");
	desc->size = sizeof(CRGrabControllerDesc);
	desc->ifInfo = CRGrabControllerIf::GetIfInfoStatic();
	((IfInfo*)CRGrabControllerIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRGrabControllerDesc>;
	field = desc->AddBase("CRControllerDesc");
	field->offset = int((char*)(CRControllerDesc*)pCRGrabControllerDesc - (char*)pCRGrabControllerDesc);
	field = desc->AddField("", "double", "rateSpringSoften", "");
	field->offset = int((char*)&(pCRGrabControllerDesc->rateSpringSoften) - (char*)pCRGrabControllerDesc);
	field = desc->AddField("", "double", "rateDamperSoften", "");
	field->offset = int((char*)&(pCRGrabControllerDesc->rateDamperSoften) - (char*)pCRGrabControllerDesc);
	field = desc->AddField("", "double", "rateSpringHarden", "");
	field->offset = int((char*)&(pCRGrabControllerDesc->rateSpringHarden) - (char*)pCRGrabControllerDesc);
	field = desc->AddField("", "double", "rateDamperHarden", "");
	field->offset = int((char*)&(pCRGrabControllerDesc->rateDamperHarden) - (char*)pCRGrabControllerDesc);
	db->RegisterDesc(desc);
	
	CRCreatureDesc* pCRCreatureDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRCreatureDesc");
	desc->size = sizeof(CRCreatureDesc);
	desc->ifInfo = CRCreatureIf::GetIfInfoStatic();
	((IfInfo*)CRCreatureIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRCreatureDesc>;
	db->RegisterDesc(desc);
	
	CRInternalSceneObjectDesc* pCRInternalSceneObjectDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRInternalSceneObjectDesc");
	desc->size = sizeof(CRInternalSceneObjectDesc);
	desc->ifInfo = CRInternalSceneObjectIf::GetIfInfoStatic();
	((IfInfo*)CRInternalSceneObjectIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRInternalSceneObjectDesc>;
	field = desc->AddField("pointer", "char", "type", "");
	field->offset = int((char*)&(pCRInternalSceneObjectDesc->type) - (char*)pCRInternalSceneObjectDesc);
	field = desc->AddField("pointer", "PHSolidIf", "solid", "");
	field->offset = int((char*)&(pCRInternalSceneObjectDesc->solid) - (char*)pCRInternalSceneObjectDesc);
	field = desc->AddField("", "Vec3f", "position", "");
	field->offset = int((char*)&(pCRInternalSceneObjectDesc->position) - (char*)pCRInternalSceneObjectDesc);
	db->RegisterDesc(desc);
	
	CRISAttractiveObjectDesc* pCRISAttractiveObjectDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRISAttractiveObjectDesc");
	desc->size = sizeof(CRISAttractiveObjectDesc);
	desc->ifInfo = CRISAttractiveObjectIf::GetIfInfoStatic();
	((IfInfo*)CRISAttractiveObjectIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRISAttractiveObjectDesc>;
	field = desc->AddBase("CRInternalSceneObjectDesc");
	field->offset = int((char*)(CRInternalSceneObjectDesc*)pCRISAttractiveObjectDesc - (char*)pCRISAttractiveObjectDesc);
	field = desc->AddField("", "float", "bottomupAttr", "");
	field->offset = int((char*)&(pCRISAttractiveObjectDesc->bottomupAttr) - (char*)pCRISAttractiveObjectDesc);
	field = desc->AddField("", "float", "topdownAttr", "");
	field->offset = int((char*)&(pCRISAttractiveObjectDesc->topdownAttr) - (char*)pCRISAttractiveObjectDesc);
	field = desc->AddField("", "float", "unknownAttr", "");
	field->offset = int((char*)&(pCRISAttractiveObjectDesc->unknownAttr) - (char*)pCRISAttractiveObjectDesc);
	field = desc->AddField("", "float", "uncertainty", "");
	field->offset = int((char*)&(pCRISAttractiveObjectDesc->uncertainty) - (char*)pCRISAttractiveObjectDesc);
	field = desc->AddField("", "float", "uncertaintyIncRate", "");
	field->offset = int((char*)&(pCRISAttractiveObjectDesc->uncertaintyIncRate) - (char*)pCRISAttractiveObjectDesc);
	field = desc->AddField("", "float", "uncertaintyDecRate", "");
	field->offset = int((char*)&(pCRISAttractiveObjectDesc->uncertaintyDecRate) - (char*)pCRISAttractiveObjectDesc);
	db->RegisterDesc(desc);
	
	CRISTravelPotentialObjectDesc* pCRISTravelPotentialObjectDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRISTravelPotentialObjectDesc");
	desc->size = sizeof(CRISTravelPotentialObjectDesc);
	desc->ifInfo = CRISTravelPotentialObjectIf::GetIfInfoStatic();
	((IfInfo*)CRISTravelPotentialObjectIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRISTravelPotentialObjectDesc>;
	field = desc->AddBase("CRInternalSceneObjectDesc");
	field->offset = int((char*)(CRInternalSceneObjectDesc*)pCRISTravelPotentialObjectDesc - (char*)pCRISTravelPotentialObjectDesc);
	field = desc->AddField("", "Vec2f", "strength", "");
	field->offset = int((char*)&(pCRISTravelPotentialObjectDesc->strength) - (char*)pCRISTravelPotentialObjectDesc);
	field = desc->AddField("", "Vec2f", "decay", "");
	field->offset = int((char*)&(pCRISTravelPotentialObjectDesc->decay) - (char*)pCRISTravelPotentialObjectDesc);
	db->RegisterDesc(desc);
	
	CRInternalSceneDesc* pCRInternalSceneDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRInternalSceneDesc");
	desc->size = sizeof(CRInternalSceneDesc);
	desc->ifInfo = CRInternalSceneIf::GetIfInfoStatic();
	((IfInfo*)CRInternalSceneIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRInternalSceneDesc>;
	db->RegisterDesc(desc);
	
	CRSensorDesc* pCRSensorDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CRSensorDesc");
	desc->size = sizeof(CRSensorDesc);
	desc->ifInfo = CRSensorIf::GetIfInfoStatic();
	((IfInfo*)CRSensorIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CRSensorDesc>;
	db->RegisterDesc(desc);
	
	CROpticalSensorDesc* pCROpticalSensorDesc = NULL;
	desc = DBG_NEW UTTypeDesc("CROpticalSensorDesc");
	desc->size = sizeof(CROpticalSensorDesc);
	desc->ifInfo = CROpticalSensorIf::GetIfInfoStatic();
	((IfInfo*)CROpticalSensorIf::GetIfInfoStatic())->desc = desc;
	desc->access = DBG_NEW UTAccess<CROpticalSensorDesc>;
	field = desc->AddBase("CRSensorDesc");
	field->offset = int((char*)(CRSensorDesc*)pCROpticalSensorDesc - (char*)pCROpticalSensorDesc);
	db->RegisterDesc(desc);
