# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
import _Base
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def Deg(*args):
  return _Base.Deg(*args)
Deg = _Base.Deg

def Rad(*args):
  return _Base.Rad(*args)
Rad = _Base.Rad
class Vec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Base.Vec2f_x_set
    __swig_getmethods__["x"] = _Base.Vec2f_x_get
    if _newclass:x = _swig_property(_Base.Vec2f_x_get, _Base.Vec2f_x_set)
    __swig_setmethods__["y"] = _Base.Vec2f_y_set
    __swig_getmethods__["y"] = _Base.Vec2f_y_get
    if _newclass:y = _swig_property(_Base.Vec2f_y_get, _Base.Vec2f_y_set)
    def clear(self): return _Base.Vec2f_clear(self)
    def norm(self): return _Base.Vec2f_norm(self)
    def square(self): return _Base.Vec2f_square(self)
    def resize(self, *args): return _Base.Vec2f_resize(self, *args)
    def size(self): return _Base.Vec2f_size(self)
    def unit(self): return _Base.Vec2f_unit(self)
    def unitize(self): return _Base.Vec2f_unitize(self)
    def __init__(self, *args): 
        this = _Base.new_Vec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def Test(self, *args): return _Base.Vec2f_Test(self, *args)
    def __getitem__(self, *args): return _Base.Vec2f___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Vec2f___setitem__(self, *args)
    def __add__(self, *args): return _Base.Vec2f___add__(self, *args)
    def __sub__(self, *args): return _Base.Vec2f___sub__(self, *args)
    def __mul__(self, *args): return _Base.Vec2f___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Vec2f
    __del__ = lambda self : None;
Vec2f_swigregister = _Base.Vec2f_swigregister
Vec2f_swigregister(Vec2f)

class Vec2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Base.Vec2d_x_set
    __swig_getmethods__["x"] = _Base.Vec2d_x_get
    if _newclass:x = _swig_property(_Base.Vec2d_x_get, _Base.Vec2d_x_set)
    __swig_setmethods__["y"] = _Base.Vec2d_y_set
    __swig_getmethods__["y"] = _Base.Vec2d_y_get
    if _newclass:y = _swig_property(_Base.Vec2d_y_get, _Base.Vec2d_y_set)
    def clear(self): return _Base.Vec2d_clear(self)
    def norm(self): return _Base.Vec2d_norm(self)
    def square(self): return _Base.Vec2d_square(self)
    def resize(self, *args): return _Base.Vec2d_resize(self, *args)
    def size(self): return _Base.Vec2d_size(self)
    def unit(self): return _Base.Vec2d_unit(self)
    def unitize(self): return _Base.Vec2d_unitize(self)
    def __init__(self, *args): 
        this = _Base.new_Vec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Vec2d___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Vec2d___setitem__(self, *args)
    def __add__(self, *args): return _Base.Vec2d___add__(self, *args)
    def __sub__(self, *args): return _Base.Vec2d___sub__(self, *args)
    def __mul__(self, *args): return _Base.Vec2d___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Vec2d
    __del__ = lambda self : None;
Vec2d_swigregister = _Base.Vec2d_swigregister
Vec2d_swigregister(Vec2d)

class Vec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Base.Vec3f_x_set
    __swig_getmethods__["x"] = _Base.Vec3f_x_get
    if _newclass:x = _swig_property(_Base.Vec3f_x_get, _Base.Vec3f_x_set)
    __swig_setmethods__["y"] = _Base.Vec3f_y_set
    __swig_getmethods__["y"] = _Base.Vec3f_y_get
    if _newclass:y = _swig_property(_Base.Vec3f_y_get, _Base.Vec3f_y_set)
    __swig_setmethods__["z"] = _Base.Vec3f_z_set
    __swig_getmethods__["z"] = _Base.Vec3f_z_get
    if _newclass:z = _swig_property(_Base.Vec3f_z_get, _Base.Vec3f_z_set)
    def clear(self): return _Base.Vec3f_clear(self)
    def norm(self): return _Base.Vec3f_norm(self)
    def square(self): return _Base.Vec3f_square(self)
    def resize(self, *args): return _Base.Vec3f_resize(self, *args)
    def size(self): return _Base.Vec3f_size(self)
    def unit(self): return _Base.Vec3f_unit(self)
    def unitize(self): return _Base.Vec3f_unitize(self)
    def __init__(self, *args): 
        this = _Base.new_Vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Vec3f___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Vec3f___setitem__(self, *args)
    def __add__(self, *args): return _Base.Vec3f___add__(self, *args)
    def __sub__(self, *args): return _Base.Vec3f___sub__(self, *args)
    def __mul__(self, *args): return _Base.Vec3f___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Vec3f
    __del__ = lambda self : None;
Vec3f_swigregister = _Base.Vec3f_swigregister
Vec3f_swigregister(Vec3f)

class Vec3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Base.Vec3d_x_set
    __swig_getmethods__["x"] = _Base.Vec3d_x_get
    if _newclass:x = _swig_property(_Base.Vec3d_x_get, _Base.Vec3d_x_set)
    __swig_setmethods__["y"] = _Base.Vec3d_y_set
    __swig_getmethods__["y"] = _Base.Vec3d_y_get
    if _newclass:y = _swig_property(_Base.Vec3d_y_get, _Base.Vec3d_y_set)
    __swig_setmethods__["z"] = _Base.Vec3d_z_set
    __swig_getmethods__["z"] = _Base.Vec3d_z_get
    if _newclass:z = _swig_property(_Base.Vec3d_z_get, _Base.Vec3d_z_set)
    def clear(self): return _Base.Vec3d_clear(self)
    def norm(self): return _Base.Vec3d_norm(self)
    def square(self): return _Base.Vec3d_square(self)
    def resize(self, *args): return _Base.Vec3d_resize(self, *args)
    def size(self): return _Base.Vec3d_size(self)
    def unit(self): return _Base.Vec3d_unit(self)
    def unitize(self): return _Base.Vec3d_unitize(self)
    def __init__(self, *args): 
        this = _Base.new_Vec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Vec3d___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Vec3d___setitem__(self, *args)
    def __add__(self, *args): return _Base.Vec3d___add__(self, *args)
    def __sub__(self, *args): return _Base.Vec3d___sub__(self, *args)
    def __mul__(self, *args): return _Base.Vec3d___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Vec3d
    __del__ = lambda self : None;
Vec3d_swigregister = _Base.Vec3d_swigregister
Vec3d_swigregister(Vec3d)

class Vec4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Base.Vec4f_x_set
    __swig_getmethods__["x"] = _Base.Vec4f_x_get
    if _newclass:x = _swig_property(_Base.Vec4f_x_get, _Base.Vec4f_x_set)
    __swig_setmethods__["y"] = _Base.Vec4f_y_set
    __swig_getmethods__["y"] = _Base.Vec4f_y_get
    if _newclass:y = _swig_property(_Base.Vec4f_y_get, _Base.Vec4f_y_set)
    __swig_setmethods__["z"] = _Base.Vec4f_z_set
    __swig_getmethods__["z"] = _Base.Vec4f_z_get
    if _newclass:z = _swig_property(_Base.Vec4f_z_get, _Base.Vec4f_z_set)
    __swig_setmethods__["w"] = _Base.Vec4f_w_set
    __swig_getmethods__["w"] = _Base.Vec4f_w_get
    if _newclass:w = _swig_property(_Base.Vec4f_w_get, _Base.Vec4f_w_set)
    def clear(self): return _Base.Vec4f_clear(self)
    def norm(self): return _Base.Vec4f_norm(self)
    def square(self): return _Base.Vec4f_square(self)
    def resize(self, *args): return _Base.Vec4f_resize(self, *args)
    def size(self): return _Base.Vec4f_size(self)
    def unit(self): return _Base.Vec4f_unit(self)
    def unitize(self): return _Base.Vec4f_unitize(self)
    def __init__(self, *args): 
        this = _Base.new_Vec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Vec4f___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Vec4f___setitem__(self, *args)
    def __add__(self, *args): return _Base.Vec4f___add__(self, *args)
    def __sub__(self, *args): return _Base.Vec4f___sub__(self, *args)
    def __mul__(self, *args): return _Base.Vec4f___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Vec4f
    __del__ = lambda self : None;
Vec4f_swigregister = _Base.Vec4f_swigregister
Vec4f_swigregister(Vec4f)

class Vec4d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Base.Vec4d_x_set
    __swig_getmethods__["x"] = _Base.Vec4d_x_get
    if _newclass:x = _swig_property(_Base.Vec4d_x_get, _Base.Vec4d_x_set)
    __swig_setmethods__["y"] = _Base.Vec4d_y_set
    __swig_getmethods__["y"] = _Base.Vec4d_y_get
    if _newclass:y = _swig_property(_Base.Vec4d_y_get, _Base.Vec4d_y_set)
    __swig_setmethods__["z"] = _Base.Vec4d_z_set
    __swig_getmethods__["z"] = _Base.Vec4d_z_get
    if _newclass:z = _swig_property(_Base.Vec4d_z_get, _Base.Vec4d_z_set)
    __swig_setmethods__["w"] = _Base.Vec4d_w_set
    __swig_getmethods__["w"] = _Base.Vec4d_w_get
    if _newclass:w = _swig_property(_Base.Vec4d_w_get, _Base.Vec4d_w_set)
    def clear(self): return _Base.Vec4d_clear(self)
    def norm(self): return _Base.Vec4d_norm(self)
    def square(self): return _Base.Vec4d_square(self)
    def resize(self, *args): return _Base.Vec4d_resize(self, *args)
    def size(self): return _Base.Vec4d_size(self)
    def unit(self): return _Base.Vec4d_unit(self)
    def unitize(self): return _Base.Vec4d_unitize(self)
    def __init__(self, *args): 
        this = _Base.new_Vec4d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Vec4d___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Vec4d___setitem__(self, *args)
    def __add__(self, *args): return _Base.Vec4d___add__(self, *args)
    def __sub__(self, *args): return _Base.Vec4d___sub__(self, *args)
    def __mul__(self, *args): return _Base.Vec4d___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Vec4d
    __del__ = lambda self : None;
Vec4d_swigregister = _Base.Vec4d_swigregister
Vec4d_swigregister(Vec4d)

class Matrix2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _Base.Matrix2f_xx_set
    __swig_getmethods__["xx"] = _Base.Matrix2f_xx_get
    if _newclass:xx = _swig_property(_Base.Matrix2f_xx_get, _Base.Matrix2f_xx_set)
    __swig_setmethods__["xy"] = _Base.Matrix2f_xy_set
    __swig_getmethods__["xy"] = _Base.Matrix2f_xy_get
    if _newclass:xy = _swig_property(_Base.Matrix2f_xy_get, _Base.Matrix2f_xy_set)
    __swig_setmethods__["yx"] = _Base.Matrix2f_yx_set
    __swig_getmethods__["yx"] = _Base.Matrix2f_yx_get
    if _newclass:yx = _swig_property(_Base.Matrix2f_yx_get, _Base.Matrix2f_yx_set)
    __swig_setmethods__["yy"] = _Base.Matrix2f_yy_set
    __swig_getmethods__["yy"] = _Base.Matrix2f_yy_get
    if _newclass:yy = _swig_property(_Base.Matrix2f_yy_get, _Base.Matrix2f_yy_set)
    def clear(self): return _Base.Matrix2f_clear(self)
    def col(self, *args): return _Base.Matrix2f_col(self, *args)
    def row(self, *args): return _Base.Matrix2f_row(self, *args)
    def det(self): return _Base.Matrix2f_det(self)
    def height(self): return _Base.Matrix2f_height(self)
    def width(self): return _Base.Matrix2f_width(self)
    def resize(self, *args): return _Base.Matrix2f_resize(self, *args)
    def trans(self): return _Base.Matrix2f_trans(self)
    def inv(self): return _Base.Matrix2f_inv(self)
    def __init__(self, *args): 
        this = _Base.new_Matrix2f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Zero"] = lambda x: _Base.Matrix2f_Zero
    if _newclass:Zero = staticmethod(_Base.Matrix2f_Zero)
    __swig_getmethods__["Unit"] = lambda x: _Base.Matrix2f_Unit
    if _newclass:Unit = staticmethod(_Base.Matrix2f_Unit)
    __swig_getmethods__["Diag"] = lambda x: _Base.Matrix2f_Diag
    if _newclass:Diag = staticmethod(_Base.Matrix2f_Diag)
    __swig_getmethods__["Rot"] = lambda x: _Base.Matrix2f_Rot
    if _newclass:Rot = staticmethod(_Base.Matrix2f_Rot)
    def angle(self): return _Base.Matrix2f_angle(self)
    def __getitem__(self, *args): return _Base.Matrix2f___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Matrix2f___setitem__(self, *args)
    def __add__(self, *args): return _Base.Matrix2f___add__(self, *args)
    def __sub__(self, *args): return _Base.Matrix2f___sub__(self, *args)
    def __mul__(self, *args): return _Base.Matrix2f___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Matrix2f
    __del__ = lambda self : None;
Matrix2f_swigregister = _Base.Matrix2f_swigregister
Matrix2f_swigregister(Matrix2f)

def Matrix2f_Zero():
  return _Base.Matrix2f_Zero()
Matrix2f_Zero = _Base.Matrix2f_Zero

def Matrix2f_Unit():
  return _Base.Matrix2f_Unit()
Matrix2f_Unit = _Base.Matrix2f_Unit

def Matrix2f_Diag(*args):
  return _Base.Matrix2f_Diag(*args)
Matrix2f_Diag = _Base.Matrix2f_Diag

def Matrix2f_Rot(*args):
  return _Base.Matrix2f_Rot(*args)
Matrix2f_Rot = _Base.Matrix2f_Rot

class Matrix2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _Base.Matrix2d_xx_set
    __swig_getmethods__["xx"] = _Base.Matrix2d_xx_get
    if _newclass:xx = _swig_property(_Base.Matrix2d_xx_get, _Base.Matrix2d_xx_set)
    __swig_setmethods__["xy"] = _Base.Matrix2d_xy_set
    __swig_getmethods__["xy"] = _Base.Matrix2d_xy_get
    if _newclass:xy = _swig_property(_Base.Matrix2d_xy_get, _Base.Matrix2d_xy_set)
    __swig_setmethods__["yx"] = _Base.Matrix2d_yx_set
    __swig_getmethods__["yx"] = _Base.Matrix2d_yx_get
    if _newclass:yx = _swig_property(_Base.Matrix2d_yx_get, _Base.Matrix2d_yx_set)
    __swig_setmethods__["yy"] = _Base.Matrix2d_yy_set
    __swig_getmethods__["yy"] = _Base.Matrix2d_yy_get
    if _newclass:yy = _swig_property(_Base.Matrix2d_yy_get, _Base.Matrix2d_yy_set)
    def clear(self): return _Base.Matrix2d_clear(self)
    def col(self, *args): return _Base.Matrix2d_col(self, *args)
    def row(self, *args): return _Base.Matrix2d_row(self, *args)
    def det(self): return _Base.Matrix2d_det(self)
    def height(self): return _Base.Matrix2d_height(self)
    def width(self): return _Base.Matrix2d_width(self)
    def resize(self, *args): return _Base.Matrix2d_resize(self, *args)
    def trans(self): return _Base.Matrix2d_trans(self)
    def inv(self): return _Base.Matrix2d_inv(self)
    def __init__(self, *args): 
        this = _Base.new_Matrix2d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Zero"] = lambda x: _Base.Matrix2d_Zero
    if _newclass:Zero = staticmethod(_Base.Matrix2d_Zero)
    __swig_getmethods__["Unit"] = lambda x: _Base.Matrix2d_Unit
    if _newclass:Unit = staticmethod(_Base.Matrix2d_Unit)
    __swig_getmethods__["Diag"] = lambda x: _Base.Matrix2d_Diag
    if _newclass:Diag = staticmethod(_Base.Matrix2d_Diag)
    __swig_getmethods__["Rot"] = lambda x: _Base.Matrix2d_Rot
    if _newclass:Rot = staticmethod(_Base.Matrix2d_Rot)
    def angle(self): return _Base.Matrix2d_angle(self)
    def __getitem__(self, *args): return _Base.Matrix2d___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Matrix2d___setitem__(self, *args)
    def __add__(self, *args): return _Base.Matrix2d___add__(self, *args)
    def __sub__(self, *args): return _Base.Matrix2d___sub__(self, *args)
    def __mul__(self, *args): return _Base.Matrix2d___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Matrix2d
    __del__ = lambda self : None;
Matrix2d_swigregister = _Base.Matrix2d_swigregister
Matrix2d_swigregister(Matrix2d)

def Matrix2d_Zero():
  return _Base.Matrix2d_Zero()
Matrix2d_Zero = _Base.Matrix2d_Zero

def Matrix2d_Unit():
  return _Base.Matrix2d_Unit()
Matrix2d_Unit = _Base.Matrix2d_Unit

def Matrix2d_Diag(*args):
  return _Base.Matrix2d_Diag(*args)
Matrix2d_Diag = _Base.Matrix2d_Diag

def Matrix2d_Rot(*args):
  return _Base.Matrix2d_Rot(*args)
Matrix2d_Rot = _Base.Matrix2d_Rot

class Matrix3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _Base.Matrix3f_xx_set
    __swig_getmethods__["xx"] = _Base.Matrix3f_xx_get
    if _newclass:xx = _swig_property(_Base.Matrix3f_xx_get, _Base.Matrix3f_xx_set)
    __swig_setmethods__["xy"] = _Base.Matrix3f_xy_set
    __swig_getmethods__["xy"] = _Base.Matrix3f_xy_get
    if _newclass:xy = _swig_property(_Base.Matrix3f_xy_get, _Base.Matrix3f_xy_set)
    __swig_setmethods__["xz"] = _Base.Matrix3f_xz_set
    __swig_getmethods__["xz"] = _Base.Matrix3f_xz_get
    if _newclass:xz = _swig_property(_Base.Matrix3f_xz_get, _Base.Matrix3f_xz_set)
    __swig_setmethods__["yx"] = _Base.Matrix3f_yx_set
    __swig_getmethods__["yx"] = _Base.Matrix3f_yx_get
    if _newclass:yx = _swig_property(_Base.Matrix3f_yx_get, _Base.Matrix3f_yx_set)
    __swig_setmethods__["yy"] = _Base.Matrix3f_yy_set
    __swig_getmethods__["yy"] = _Base.Matrix3f_yy_get
    if _newclass:yy = _swig_property(_Base.Matrix3f_yy_get, _Base.Matrix3f_yy_set)
    __swig_setmethods__["yz"] = _Base.Matrix3f_yz_set
    __swig_getmethods__["yz"] = _Base.Matrix3f_yz_get
    if _newclass:yz = _swig_property(_Base.Matrix3f_yz_get, _Base.Matrix3f_yz_set)
    __swig_setmethods__["zx"] = _Base.Matrix3f_zx_set
    __swig_getmethods__["zx"] = _Base.Matrix3f_zx_get
    if _newclass:zx = _swig_property(_Base.Matrix3f_zx_get, _Base.Matrix3f_zx_set)
    __swig_setmethods__["zy"] = _Base.Matrix3f_zy_set
    __swig_getmethods__["zy"] = _Base.Matrix3f_zy_get
    if _newclass:zy = _swig_property(_Base.Matrix3f_zy_get, _Base.Matrix3f_zy_set)
    __swig_setmethods__["zz"] = _Base.Matrix3f_zz_set
    __swig_getmethods__["zz"] = _Base.Matrix3f_zz_get
    if _newclass:zz = _swig_property(_Base.Matrix3f_zz_get, _Base.Matrix3f_zz_set)
    def clear(self): return _Base.Matrix3f_clear(self)
    def col(self, *args): return _Base.Matrix3f_col(self, *args)
    def row(self, *args): return _Base.Matrix3f_row(self, *args)
    def det(self): return _Base.Matrix3f_det(self)
    def height(self): return _Base.Matrix3f_height(self)
    def width(self): return _Base.Matrix3f_width(self)
    def resize(self, *args): return _Base.Matrix3f_resize(self, *args)
    def trans(self): return _Base.Matrix3f_trans(self)
    def inv(self): return _Base.Matrix3f_inv(self)
    def __init__(self, *args): 
        this = _Base.new_Matrix3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Zero"] = lambda x: _Base.Matrix3f_Zero
    if _newclass:Zero = staticmethod(_Base.Matrix3f_Zero)
    __swig_getmethods__["Unit"] = lambda x: _Base.Matrix3f_Unit
    if _newclass:Unit = staticmethod(_Base.Matrix3f_Unit)
    __swig_getmethods__["Diag"] = lambda x: _Base.Matrix3f_Diag
    if _newclass:Diag = staticmethod(_Base.Matrix3f_Diag)
    __swig_getmethods__["Rot"] = lambda x: _Base.Matrix3f_Rot
    if _newclass:Rot = staticmethod(_Base.Matrix3f_Rot)
    __swig_getmethods__["Cross"] = lambda x: _Base.Matrix3f_Cross
    if _newclass:Cross = staticmethod(_Base.Matrix3f_Cross)
    def __getitem__(self, *args): return _Base.Matrix3f___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Matrix3f___setitem__(self, *args)
    def __add__(self, *args): return _Base.Matrix3f___add__(self, *args)
    def __sub__(self, *args): return _Base.Matrix3f___sub__(self, *args)
    def __mul__(self, *args): return _Base.Matrix3f___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Matrix3f
    __del__ = lambda self : None;
Matrix3f_swigregister = _Base.Matrix3f_swigregister
Matrix3f_swigregister(Matrix3f)

def Matrix3f_Zero():
  return _Base.Matrix3f_Zero()
Matrix3f_Zero = _Base.Matrix3f_Zero

def Matrix3f_Unit():
  return _Base.Matrix3f_Unit()
Matrix3f_Unit = _Base.Matrix3f_Unit

def Matrix3f_Diag(*args):
  return _Base.Matrix3f_Diag(*args)
Matrix3f_Diag = _Base.Matrix3f_Diag

def Matrix3f_Rot(*args):
  return _Base.Matrix3f_Rot(*args)
Matrix3f_Rot = _Base.Matrix3f_Rot

def Matrix3f_Cross(*args):
  return _Base.Matrix3f_Cross(*args)
Matrix3f_Cross = _Base.Matrix3f_Cross

class Matrix3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _Base.Matrix3d_xx_set
    __swig_getmethods__["xx"] = _Base.Matrix3d_xx_get
    if _newclass:xx = _swig_property(_Base.Matrix3d_xx_get, _Base.Matrix3d_xx_set)
    __swig_setmethods__["xy"] = _Base.Matrix3d_xy_set
    __swig_getmethods__["xy"] = _Base.Matrix3d_xy_get
    if _newclass:xy = _swig_property(_Base.Matrix3d_xy_get, _Base.Matrix3d_xy_set)
    __swig_setmethods__["xz"] = _Base.Matrix3d_xz_set
    __swig_getmethods__["xz"] = _Base.Matrix3d_xz_get
    if _newclass:xz = _swig_property(_Base.Matrix3d_xz_get, _Base.Matrix3d_xz_set)
    __swig_setmethods__["yx"] = _Base.Matrix3d_yx_set
    __swig_getmethods__["yx"] = _Base.Matrix3d_yx_get
    if _newclass:yx = _swig_property(_Base.Matrix3d_yx_get, _Base.Matrix3d_yx_set)
    __swig_setmethods__["yy"] = _Base.Matrix3d_yy_set
    __swig_getmethods__["yy"] = _Base.Matrix3d_yy_get
    if _newclass:yy = _swig_property(_Base.Matrix3d_yy_get, _Base.Matrix3d_yy_set)
    __swig_setmethods__["yz"] = _Base.Matrix3d_yz_set
    __swig_getmethods__["yz"] = _Base.Matrix3d_yz_get
    if _newclass:yz = _swig_property(_Base.Matrix3d_yz_get, _Base.Matrix3d_yz_set)
    __swig_setmethods__["zx"] = _Base.Matrix3d_zx_set
    __swig_getmethods__["zx"] = _Base.Matrix3d_zx_get
    if _newclass:zx = _swig_property(_Base.Matrix3d_zx_get, _Base.Matrix3d_zx_set)
    __swig_setmethods__["zy"] = _Base.Matrix3d_zy_set
    __swig_getmethods__["zy"] = _Base.Matrix3d_zy_get
    if _newclass:zy = _swig_property(_Base.Matrix3d_zy_get, _Base.Matrix3d_zy_set)
    __swig_setmethods__["zz"] = _Base.Matrix3d_zz_set
    __swig_getmethods__["zz"] = _Base.Matrix3d_zz_get
    if _newclass:zz = _swig_property(_Base.Matrix3d_zz_get, _Base.Matrix3d_zz_set)
    def clear(self): return _Base.Matrix3d_clear(self)
    def col(self, *args): return _Base.Matrix3d_col(self, *args)
    def row(self, *args): return _Base.Matrix3d_row(self, *args)
    def det(self): return _Base.Matrix3d_det(self)
    def height(self): return _Base.Matrix3d_height(self)
    def width(self): return _Base.Matrix3d_width(self)
    def resize(self, *args): return _Base.Matrix3d_resize(self, *args)
    def trans(self): return _Base.Matrix3d_trans(self)
    def inv(self): return _Base.Matrix3d_inv(self)
    def __init__(self, *args): 
        this = _Base.new_Matrix3d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Zero"] = lambda x: _Base.Matrix3d_Zero
    if _newclass:Zero = staticmethod(_Base.Matrix3d_Zero)
    __swig_getmethods__["Unit"] = lambda x: _Base.Matrix3d_Unit
    if _newclass:Unit = staticmethod(_Base.Matrix3d_Unit)
    __swig_getmethods__["Diag"] = lambda x: _Base.Matrix3d_Diag
    if _newclass:Diag = staticmethod(_Base.Matrix3d_Diag)
    __swig_getmethods__["Rot"] = lambda x: _Base.Matrix3d_Rot
    if _newclass:Rot = staticmethod(_Base.Matrix3d_Rot)
    __swig_getmethods__["Cross"] = lambda x: _Base.Matrix3d_Cross
    if _newclass:Cross = staticmethod(_Base.Matrix3d_Cross)
    def __getitem__(self, *args): return _Base.Matrix3d___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Matrix3d___setitem__(self, *args)
    def __add__(self, *args): return _Base.Matrix3d___add__(self, *args)
    def __sub__(self, *args): return _Base.Matrix3d___sub__(self, *args)
    def __mul__(self, *args): return _Base.Matrix3d___mul__(self, *args)
    __swig_destroy__ = _Base.delete_Matrix3d
    __del__ = lambda self : None;
Matrix3d_swigregister = _Base.Matrix3d_swigregister
Matrix3d_swigregister(Matrix3d)

def Matrix3d_Zero():
  return _Base.Matrix3d_Zero()
Matrix3d_Zero = _Base.Matrix3d_Zero

def Matrix3d_Unit():
  return _Base.Matrix3d_Unit()
Matrix3d_Unit = _Base.Matrix3d_Unit

def Matrix3d_Diag(*args):
  return _Base.Matrix3d_Diag(*args)
Matrix3d_Diag = _Base.Matrix3d_Diag

def Matrix3d_Rot(*args):
  return _Base.Matrix3d_Rot(*args)
Matrix3d_Rot = _Base.Matrix3d_Rot

def Matrix3d_Cross(*args):
  return _Base.Matrix3d_Cross(*args)
Matrix3d_Cross = _Base.Matrix3d_Cross

class Affine2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Affine2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Affine2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _Base.Affine2f_xx_set
    __swig_getmethods__["xx"] = _Base.Affine2f_xx_get
    if _newclass:xx = _swig_property(_Base.Affine2f_xx_get, _Base.Affine2f_xx_set)
    __swig_setmethods__["xy"] = _Base.Affine2f_xy_set
    __swig_getmethods__["xy"] = _Base.Affine2f_xy_get
    if _newclass:xy = _swig_property(_Base.Affine2f_xy_get, _Base.Affine2f_xy_set)
    __swig_setmethods__["xz"] = _Base.Affine2f_xz_set
    __swig_getmethods__["xz"] = _Base.Affine2f_xz_get
    if _newclass:xz = _swig_property(_Base.Affine2f_xz_get, _Base.Affine2f_xz_set)
    __swig_setmethods__["yx"] = _Base.Affine2f_yx_set
    __swig_getmethods__["yx"] = _Base.Affine2f_yx_get
    if _newclass:yx = _swig_property(_Base.Affine2f_yx_get, _Base.Affine2f_yx_set)
    __swig_setmethods__["yy"] = _Base.Affine2f_yy_set
    __swig_getmethods__["yy"] = _Base.Affine2f_yy_get
    if _newclass:yy = _swig_property(_Base.Affine2f_yy_get, _Base.Affine2f_yy_set)
    __swig_setmethods__["yz"] = _Base.Affine2f_yz_set
    __swig_getmethods__["yz"] = _Base.Affine2f_yz_get
    if _newclass:yz = _swig_property(_Base.Affine2f_yz_get, _Base.Affine2f_yz_set)
    __swig_setmethods__["px"] = _Base.Affine2f_px_set
    __swig_getmethods__["px"] = _Base.Affine2f_px_get
    if _newclass:px = _swig_property(_Base.Affine2f_px_get, _Base.Affine2f_px_set)
    __swig_setmethods__["py"] = _Base.Affine2f_py_set
    __swig_getmethods__["py"] = _Base.Affine2f_py_get
    if _newclass:py = _swig_property(_Base.Affine2f_py_get, _Base.Affine2f_py_set)
    __swig_setmethods__["pz"] = _Base.Affine2f_pz_set
    __swig_getmethods__["pz"] = _Base.Affine2f_pz_get
    if _newclass:pz = _swig_property(_Base.Affine2f_pz_get, _Base.Affine2f_pz_set)
    def clear(self): return _Base.Affine2f_clear(self)
    def col(self, *args): return _Base.Affine2f_col(self, *args)
    def row(self, *args): return _Base.Affine2f_row(self, *args)
    def det(self): return _Base.Affine2f_det(self)
    def height(self): return _Base.Affine2f_height(self)
    def width(self): return _Base.Affine2f_width(self)
    def resize(self, *args): return _Base.Affine2f_resize(self, *args)
    def trans(self): return _Base.Affine2f_trans(self)
    def inv(self): return _Base.Affine2f_inv(self)
    __swig_getmethods__["Unit"] = lambda x: _Base.Affine2f_Unit
    if _newclass:Unit = staticmethod(_Base.Affine2f_Unit)
    __swig_getmethods__["Trn"] = lambda x: _Base.Affine2f_Trn
    if _newclass:Trn = staticmethod(_Base.Affine2f_Trn)
    __swig_getmethods__["Rot"] = lambda x: _Base.Affine2f_Rot
    if _newclass:Rot = staticmethod(_Base.Affine2f_Rot)
    __swig_getmethods__["Scale"] = lambda x: _Base.Affine2f_Scale
    if _newclass:Scale = staticmethod(_Base.Affine2f_Scale)
    def __init__(self): 
        this = _Base.new_Affine2f()
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Affine2f___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Affine2f___setitem__(self, *args)
    def __add__(self, *args): return _Base.Affine2f___add__(self, *args)
    def __sub__(self, *args): return _Base.Affine2f___sub__(self, *args)
    def __mul__(self, *args): return _Base.Affine2f___mul__(self, *args)
    def setTrn(self, *args): return _Base.Affine2f_setTrn(self, *args)
    def getTrn(self): return _Base.Affine2f_getTrn(self)
    def setPos(self, *args): return _Base.Affine2f_setPos(self, *args)
    def getPos(self): return _Base.Affine2f_getPos(self)
    def setRot(self, *args): return _Base.Affine2f_setRot(self, *args)
    def getRot(self): return _Base.Affine2f_getRot(self)
    __swig_destroy__ = _Base.delete_Affine2f
    __del__ = lambda self : None;
Affine2f_swigregister = _Base.Affine2f_swigregister
Affine2f_swigregister(Affine2f)

def IsUnitary(*args):
  return _Base.IsUnitary(*args)
IsUnitary = _Base.IsUnitary

def Affine2f_Unit():
  return _Base.Affine2f_Unit()
Affine2f_Unit = _Base.Affine2f_Unit

def Affine2f_Trn(*args):
  return _Base.Affine2f_Trn(*args)
Affine2f_Trn = _Base.Affine2f_Trn

def Affine2f_Rot(*args):
  return _Base.Affine2f_Rot(*args)
Affine2f_Rot = _Base.Affine2f_Rot

def Affine2f_Scale(*args):
  return _Base.Affine2f_Scale(*args)
Affine2f_Scale = _Base.Affine2f_Scale

class Affinef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Affinef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Affinef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _Base.Affinef_xx_set
    __swig_getmethods__["xx"] = _Base.Affinef_xx_get
    if _newclass:xx = _swig_property(_Base.Affinef_xx_get, _Base.Affinef_xx_set)
    __swig_setmethods__["xy"] = _Base.Affinef_xy_set
    __swig_getmethods__["xy"] = _Base.Affinef_xy_get
    if _newclass:xy = _swig_property(_Base.Affinef_xy_get, _Base.Affinef_xy_set)
    __swig_setmethods__["xz"] = _Base.Affinef_xz_set
    __swig_getmethods__["xz"] = _Base.Affinef_xz_get
    if _newclass:xz = _swig_property(_Base.Affinef_xz_get, _Base.Affinef_xz_set)
    __swig_setmethods__["xw"] = _Base.Affinef_xw_set
    __swig_getmethods__["xw"] = _Base.Affinef_xw_get
    if _newclass:xw = _swig_property(_Base.Affinef_xw_get, _Base.Affinef_xw_set)
    __swig_setmethods__["yx"] = _Base.Affinef_yx_set
    __swig_getmethods__["yx"] = _Base.Affinef_yx_get
    if _newclass:yx = _swig_property(_Base.Affinef_yx_get, _Base.Affinef_yx_set)
    __swig_setmethods__["yy"] = _Base.Affinef_yy_set
    __swig_getmethods__["yy"] = _Base.Affinef_yy_get
    if _newclass:yy = _swig_property(_Base.Affinef_yy_get, _Base.Affinef_yy_set)
    __swig_setmethods__["yz"] = _Base.Affinef_yz_set
    __swig_getmethods__["yz"] = _Base.Affinef_yz_get
    if _newclass:yz = _swig_property(_Base.Affinef_yz_get, _Base.Affinef_yz_set)
    __swig_setmethods__["yw"] = _Base.Affinef_yw_set
    __swig_getmethods__["yw"] = _Base.Affinef_yw_get
    if _newclass:yw = _swig_property(_Base.Affinef_yw_get, _Base.Affinef_yw_set)
    __swig_setmethods__["zx"] = _Base.Affinef_zx_set
    __swig_getmethods__["zx"] = _Base.Affinef_zx_get
    if _newclass:zx = _swig_property(_Base.Affinef_zx_get, _Base.Affinef_zx_set)
    __swig_setmethods__["zy"] = _Base.Affinef_zy_set
    __swig_getmethods__["zy"] = _Base.Affinef_zy_get
    if _newclass:zy = _swig_property(_Base.Affinef_zy_get, _Base.Affinef_zy_set)
    __swig_setmethods__["zz"] = _Base.Affinef_zz_set
    __swig_getmethods__["zz"] = _Base.Affinef_zz_get
    if _newclass:zz = _swig_property(_Base.Affinef_zz_get, _Base.Affinef_zz_set)
    __swig_setmethods__["zw"] = _Base.Affinef_zw_set
    __swig_getmethods__["zw"] = _Base.Affinef_zw_get
    if _newclass:zw = _swig_property(_Base.Affinef_zw_get, _Base.Affinef_zw_set)
    __swig_setmethods__["px"] = _Base.Affinef_px_set
    __swig_getmethods__["px"] = _Base.Affinef_px_get
    if _newclass:px = _swig_property(_Base.Affinef_px_get, _Base.Affinef_px_set)
    __swig_setmethods__["py"] = _Base.Affinef_py_set
    __swig_getmethods__["py"] = _Base.Affinef_py_get
    if _newclass:py = _swig_property(_Base.Affinef_py_get, _Base.Affinef_py_set)
    __swig_setmethods__["pz"] = _Base.Affinef_pz_set
    __swig_getmethods__["pz"] = _Base.Affinef_pz_get
    if _newclass:pz = _swig_property(_Base.Affinef_pz_get, _Base.Affinef_pz_set)
    __swig_setmethods__["pw"] = _Base.Affinef_pw_set
    __swig_getmethods__["pw"] = _Base.Affinef_pw_get
    if _newclass:pw = _swig_property(_Base.Affinef_pw_get, _Base.Affinef_pw_set)
    def clear(self): return _Base.Affinef_clear(self)
    def col(self, *args): return _Base.Affinef_col(self, *args)
    def row(self, *args): return _Base.Affinef_row(self, *args)
    def det(self): return _Base.Affinef_det(self)
    def height(self): return _Base.Affinef_height(self)
    def width(self): return _Base.Affinef_width(self)
    def resize(self, *args): return _Base.Affinef_resize(self, *args)
    def trans(self): return _Base.Affinef_trans(self)
    def inv(self): return _Base.Affinef_inv(self)
    __swig_getmethods__["Unit"] = lambda x: _Base.Affinef_Unit
    if _newclass:Unit = staticmethod(_Base.Affinef_Unit)
    __swig_getmethods__["Trn"] = lambda x: _Base.Affinef_Trn
    if _newclass:Trn = staticmethod(_Base.Affinef_Trn)
    __swig_getmethods__["Rot"] = lambda x: _Base.Affinef_Rot
    if _newclass:Rot = staticmethod(_Base.Affinef_Rot)
    __swig_getmethods__["Scale"] = lambda x: _Base.Affinef_Scale
    if _newclass:Scale = staticmethod(_Base.Affinef_Scale)
    __swig_getmethods__["ProjectionGL"] = lambda x: _Base.Affinef_ProjectionGL
    if _newclass:ProjectionGL = staticmethod(_Base.Affinef_ProjectionGL)
    __swig_getmethods__["ProjectionD3D"] = lambda x: _Base.Affinef_ProjectionD3D
    if _newclass:ProjectionD3D = staticmethod(_Base.Affinef_ProjectionD3D)
    def LookAt(self, *args): return _Base.Affinef_LookAt(self, *args)
    def LookAtGL(self, *args): return _Base.Affinef_LookAtGL(self, *args)
    def __init__(self): 
        this = _Base.new_Affinef()
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Affinef___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Affinef___setitem__(self, *args)
    def __add__(self, *args): return _Base.Affinef___add__(self, *args)
    def __sub__(self, *args): return _Base.Affinef___sub__(self, *args)
    def __mul__(self, *args): return _Base.Affinef___mul__(self, *args)
    def setTrn(self, *args): return _Base.Affinef_setTrn(self, *args)
    def getTrn(self): return _Base.Affinef_getTrn(self)
    def setPos(self, *args): return _Base.Affinef_setPos(self, *args)
    def getPos(self): return _Base.Affinef_getPos(self)
    def setRot(self, *args): return _Base.Affinef_setRot(self, *args)
    def getRot(self): return _Base.Affinef_getRot(self)
    __swig_destroy__ = _Base.delete_Affinef
    __del__ = lambda self : None;
Affinef_swigregister = _Base.Affinef_swigregister
Affinef_swigregister(Affinef)

def Affinef_Unit():
  return _Base.Affinef_Unit()
Affinef_Unit = _Base.Affinef_Unit

def Affinef_Trn(*args):
  return _Base.Affinef_Trn(*args)
Affinef_Trn = _Base.Affinef_Trn

def Affinef_Rot(*args):
  return _Base.Affinef_Rot(*args)
Affinef_Rot = _Base.Affinef_Rot

def Affinef_Scale(*args):
  return _Base.Affinef_Scale(*args)
Affinef_Scale = _Base.Affinef_Scale

def Affinef_ProjectionGL(*args):
  return _Base.Affinef_ProjectionGL(*args)
Affinef_ProjectionGL = _Base.Affinef_ProjectionGL

def Affinef_ProjectionD3D(*args):
  return _Base.Affinef_ProjectionD3D(*args)
Affinef_ProjectionD3D = _Base.Affinef_ProjectionD3D

class Affine2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Affine2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Affine2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _Base.Affine2d_xx_set
    __swig_getmethods__["xx"] = _Base.Affine2d_xx_get
    if _newclass:xx = _swig_property(_Base.Affine2d_xx_get, _Base.Affine2d_xx_set)
    __swig_setmethods__["xy"] = _Base.Affine2d_xy_set
    __swig_getmethods__["xy"] = _Base.Affine2d_xy_get
    if _newclass:xy = _swig_property(_Base.Affine2d_xy_get, _Base.Affine2d_xy_set)
    __swig_setmethods__["xz"] = _Base.Affine2d_xz_set
    __swig_getmethods__["xz"] = _Base.Affine2d_xz_get
    if _newclass:xz = _swig_property(_Base.Affine2d_xz_get, _Base.Affine2d_xz_set)
    __swig_setmethods__["yx"] = _Base.Affine2d_yx_set
    __swig_getmethods__["yx"] = _Base.Affine2d_yx_get
    if _newclass:yx = _swig_property(_Base.Affine2d_yx_get, _Base.Affine2d_yx_set)
    __swig_setmethods__["yy"] = _Base.Affine2d_yy_set
    __swig_getmethods__["yy"] = _Base.Affine2d_yy_get
    if _newclass:yy = _swig_property(_Base.Affine2d_yy_get, _Base.Affine2d_yy_set)
    __swig_setmethods__["yz"] = _Base.Affine2d_yz_set
    __swig_getmethods__["yz"] = _Base.Affine2d_yz_get
    if _newclass:yz = _swig_property(_Base.Affine2d_yz_get, _Base.Affine2d_yz_set)
    __swig_setmethods__["px"] = _Base.Affine2d_px_set
    __swig_getmethods__["px"] = _Base.Affine2d_px_get
    if _newclass:px = _swig_property(_Base.Affine2d_px_get, _Base.Affine2d_px_set)
    __swig_setmethods__["py"] = _Base.Affine2d_py_set
    __swig_getmethods__["py"] = _Base.Affine2d_py_get
    if _newclass:py = _swig_property(_Base.Affine2d_py_get, _Base.Affine2d_py_set)
    __swig_setmethods__["pz"] = _Base.Affine2d_pz_set
    __swig_getmethods__["pz"] = _Base.Affine2d_pz_get
    if _newclass:pz = _swig_property(_Base.Affine2d_pz_get, _Base.Affine2d_pz_set)
    def clear(self): return _Base.Affine2d_clear(self)
    def col(self, *args): return _Base.Affine2d_col(self, *args)
    def row(self, *args): return _Base.Affine2d_row(self, *args)
    def det(self): return _Base.Affine2d_det(self)
    def height(self): return _Base.Affine2d_height(self)
    def width(self): return _Base.Affine2d_width(self)
    def resize(self, *args): return _Base.Affine2d_resize(self, *args)
    def trans(self): return _Base.Affine2d_trans(self)
    def inv(self): return _Base.Affine2d_inv(self)
    __swig_getmethods__["Unit"] = lambda x: _Base.Affine2d_Unit
    if _newclass:Unit = staticmethod(_Base.Affine2d_Unit)
    __swig_getmethods__["Trn"] = lambda x: _Base.Affine2d_Trn
    if _newclass:Trn = staticmethod(_Base.Affine2d_Trn)
    __swig_getmethods__["Rot"] = lambda x: _Base.Affine2d_Rot
    if _newclass:Rot = staticmethod(_Base.Affine2d_Rot)
    __swig_getmethods__["Scale"] = lambda x: _Base.Affine2d_Scale
    if _newclass:Scale = staticmethod(_Base.Affine2d_Scale)
    def __init__(self): 
        this = _Base.new_Affine2d()
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Affine2d___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Affine2d___setitem__(self, *args)
    def __add__(self, *args): return _Base.Affine2d___add__(self, *args)
    def __sub__(self, *args): return _Base.Affine2d___sub__(self, *args)
    def __mul__(self, *args): return _Base.Affine2d___mul__(self, *args)
    def setTrn(self, *args): return _Base.Affine2d_setTrn(self, *args)
    def getTrn(self): return _Base.Affine2d_getTrn(self)
    def setPos(self, *args): return _Base.Affine2d_setPos(self, *args)
    def getPos(self): return _Base.Affine2d_getPos(self)
    def setRot(self, *args): return _Base.Affine2d_setRot(self, *args)
    def getRot(self): return _Base.Affine2d_getRot(self)
    __swig_destroy__ = _Base.delete_Affine2d
    __del__ = lambda self : None;
Affine2d_swigregister = _Base.Affine2d_swigregister
Affine2d_swigregister(Affine2d)

def Affine2d_Unit():
  return _Base.Affine2d_Unit()
Affine2d_Unit = _Base.Affine2d_Unit

def Affine2d_Trn(*args):
  return _Base.Affine2d_Trn(*args)
Affine2d_Trn = _Base.Affine2d_Trn

def Affine2d_Rot(*args):
  return _Base.Affine2d_Rot(*args)
Affine2d_Rot = _Base.Affine2d_Rot

def Affine2d_Scale(*args):
  return _Base.Affine2d_Scale(*args)
Affine2d_Scale = _Base.Affine2d_Scale

class Affined(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Affined, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Affined, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xx"] = _Base.Affined_xx_set
    __swig_getmethods__["xx"] = _Base.Affined_xx_get
    if _newclass:xx = _swig_property(_Base.Affined_xx_get, _Base.Affined_xx_set)
    __swig_setmethods__["xy"] = _Base.Affined_xy_set
    __swig_getmethods__["xy"] = _Base.Affined_xy_get
    if _newclass:xy = _swig_property(_Base.Affined_xy_get, _Base.Affined_xy_set)
    __swig_setmethods__["xz"] = _Base.Affined_xz_set
    __swig_getmethods__["xz"] = _Base.Affined_xz_get
    if _newclass:xz = _swig_property(_Base.Affined_xz_get, _Base.Affined_xz_set)
    __swig_setmethods__["xw"] = _Base.Affined_xw_set
    __swig_getmethods__["xw"] = _Base.Affined_xw_get
    if _newclass:xw = _swig_property(_Base.Affined_xw_get, _Base.Affined_xw_set)
    __swig_setmethods__["yx"] = _Base.Affined_yx_set
    __swig_getmethods__["yx"] = _Base.Affined_yx_get
    if _newclass:yx = _swig_property(_Base.Affined_yx_get, _Base.Affined_yx_set)
    __swig_setmethods__["yy"] = _Base.Affined_yy_set
    __swig_getmethods__["yy"] = _Base.Affined_yy_get
    if _newclass:yy = _swig_property(_Base.Affined_yy_get, _Base.Affined_yy_set)
    __swig_setmethods__["yz"] = _Base.Affined_yz_set
    __swig_getmethods__["yz"] = _Base.Affined_yz_get
    if _newclass:yz = _swig_property(_Base.Affined_yz_get, _Base.Affined_yz_set)
    __swig_setmethods__["yw"] = _Base.Affined_yw_set
    __swig_getmethods__["yw"] = _Base.Affined_yw_get
    if _newclass:yw = _swig_property(_Base.Affined_yw_get, _Base.Affined_yw_set)
    __swig_setmethods__["zx"] = _Base.Affined_zx_set
    __swig_getmethods__["zx"] = _Base.Affined_zx_get
    if _newclass:zx = _swig_property(_Base.Affined_zx_get, _Base.Affined_zx_set)
    __swig_setmethods__["zy"] = _Base.Affined_zy_set
    __swig_getmethods__["zy"] = _Base.Affined_zy_get
    if _newclass:zy = _swig_property(_Base.Affined_zy_get, _Base.Affined_zy_set)
    __swig_setmethods__["zz"] = _Base.Affined_zz_set
    __swig_getmethods__["zz"] = _Base.Affined_zz_get
    if _newclass:zz = _swig_property(_Base.Affined_zz_get, _Base.Affined_zz_set)
    __swig_setmethods__["zw"] = _Base.Affined_zw_set
    __swig_getmethods__["zw"] = _Base.Affined_zw_get
    if _newclass:zw = _swig_property(_Base.Affined_zw_get, _Base.Affined_zw_set)
    __swig_setmethods__["px"] = _Base.Affined_px_set
    __swig_getmethods__["px"] = _Base.Affined_px_get
    if _newclass:px = _swig_property(_Base.Affined_px_get, _Base.Affined_px_set)
    __swig_setmethods__["py"] = _Base.Affined_py_set
    __swig_getmethods__["py"] = _Base.Affined_py_get
    if _newclass:py = _swig_property(_Base.Affined_py_get, _Base.Affined_py_set)
    __swig_setmethods__["pz"] = _Base.Affined_pz_set
    __swig_getmethods__["pz"] = _Base.Affined_pz_get
    if _newclass:pz = _swig_property(_Base.Affined_pz_get, _Base.Affined_pz_set)
    __swig_setmethods__["pw"] = _Base.Affined_pw_set
    __swig_getmethods__["pw"] = _Base.Affined_pw_get
    if _newclass:pw = _swig_property(_Base.Affined_pw_get, _Base.Affined_pw_set)
    def clear(self): return _Base.Affined_clear(self)
    def col(self, *args): return _Base.Affined_col(self, *args)
    def row(self, *args): return _Base.Affined_row(self, *args)
    def det(self): return _Base.Affined_det(self)
    def height(self): return _Base.Affined_height(self)
    def width(self): return _Base.Affined_width(self)
    def resize(self, *args): return _Base.Affined_resize(self, *args)
    def trans(self): return _Base.Affined_trans(self)
    def inv(self): return _Base.Affined_inv(self)
    __swig_getmethods__["Unit"] = lambda x: _Base.Affined_Unit
    if _newclass:Unit = staticmethod(_Base.Affined_Unit)
    __swig_getmethods__["Trn"] = lambda x: _Base.Affined_Trn
    if _newclass:Trn = staticmethod(_Base.Affined_Trn)
    __swig_getmethods__["Rot"] = lambda x: _Base.Affined_Rot
    if _newclass:Rot = staticmethod(_Base.Affined_Rot)
    __swig_getmethods__["Scale"] = lambda x: _Base.Affined_Scale
    if _newclass:Scale = staticmethod(_Base.Affined_Scale)
    __swig_getmethods__["ProjectionGL"] = lambda x: _Base.Affined_ProjectionGL
    if _newclass:ProjectionGL = staticmethod(_Base.Affined_ProjectionGL)
    __swig_getmethods__["ProjectionD3D"] = lambda x: _Base.Affined_ProjectionD3D
    if _newclass:ProjectionD3D = staticmethod(_Base.Affined_ProjectionD3D)
    def LookAt(self, *args): return _Base.Affined_LookAt(self, *args)
    def LookAtGL(self, *args): return _Base.Affined_LookAtGL(self, *args)
    def __init__(self): 
        this = _Base.new_Affined()
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _Base.Affined___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Affined___setitem__(self, *args)
    def __add__(self, *args): return _Base.Affined___add__(self, *args)
    def __sub__(self, *args): return _Base.Affined___sub__(self, *args)
    def __mul__(self, *args): return _Base.Affined___mul__(self, *args)
    def setTrn(self, *args): return _Base.Affined_setTrn(self, *args)
    def getTrn(self): return _Base.Affined_getTrn(self)
    def setPos(self, *args): return _Base.Affined_setPos(self, *args)
    def getPos(self): return _Base.Affined_getPos(self)
    def setRot(self, *args): return _Base.Affined_setRot(self, *args)
    def getRot(self): return _Base.Affined_getRot(self)
    __swig_destroy__ = _Base.delete_Affined
    __del__ = lambda self : None;
Affined_swigregister = _Base.Affined_swigregister
Affined_swigregister(Affined)

def Affined_Unit():
  return _Base.Affined_Unit()
Affined_Unit = _Base.Affined_Unit

def Affined_Trn(*args):
  return _Base.Affined_Trn(*args)
Affined_Trn = _Base.Affined_Trn

def Affined_Rot(*args):
  return _Base.Affined_Rot(*args)
Affined_Rot = _Base.Affined_Rot

def Affined_Scale(*args):
  return _Base.Affined_Scale(*args)
Affined_Scale = _Base.Affined_Scale

def Affined_ProjectionGL(*args):
  return _Base.Affined_ProjectionGL(*args)
Affined_ProjectionGL = _Base.Affined_ProjectionGL

def Affined_ProjectionD3D(*args):
  return _Base.Affined_ProjectionD3D(*args)
Affined_ProjectionD3D = _Base.Affined_ProjectionD3D

class Quaterniond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaterniond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaterniond, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _Base.Quaterniond_w_set
    __swig_getmethods__["w"] = _Base.Quaterniond_w_get
    if _newclass:w = _swig_property(_Base.Quaterniond_w_get, _Base.Quaterniond_w_set)
    __swig_setmethods__["x"] = _Base.Quaterniond_x_set
    __swig_getmethods__["x"] = _Base.Quaterniond_x_get
    if _newclass:x = _swig_property(_Base.Quaterniond_x_get, _Base.Quaterniond_x_set)
    __swig_setmethods__["y"] = _Base.Quaterniond_y_set
    __swig_getmethods__["y"] = _Base.Quaterniond_y_get
    if _newclass:y = _swig_property(_Base.Quaterniond_y_get, _Base.Quaterniond_y_set)
    __swig_setmethods__["z"] = _Base.Quaterniond_z_set
    __swig_getmethods__["z"] = _Base.Quaterniond_z_get
    if _newclass:z = _swig_property(_Base.Quaterniond_z_get, _Base.Quaterniond_z_set)
    def clear(self): return _Base.Quaterniond_clear(self)
    def norm(self): return _Base.Quaterniond_norm(self)
    def square(self): return _Base.Quaterniond_square(self)
    def resize(self, *args): return _Base.Quaterniond_resize(self, *args)
    def size(self): return _Base.Quaterniond_size(self)
    def unit(self): return _Base.Quaterniond_unit(self)
    def unitize(self): return _Base.Quaterniond_unitize(self)
    def RotationHalf(self): return _Base.Quaterniond_RotationHalf(self)
    def Rotation(self): return _Base.Quaterniond_Rotation(self)
    def Axis(self): return _Base.Quaterniond_Axis(self)
    def Theta(self): return _Base.Quaterniond_Theta(self)
    def __init__(self, *args): 
        this = _Base.new_Quaterniond(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Rot"] = lambda x: _Base.Quaterniond_Rot
    if _newclass:Rot = staticmethod(_Base.Quaterniond_Rot)
    def Conjugate(self): return _Base.Quaterniond_Conjugate(self)
    def Conjugated(self): return _Base.Quaterniond_Conjugated(self)
    def Inv(self): return _Base.Quaterniond_Inv(self)
    def FromMatrix(self, *args): return _Base.Quaterniond_FromMatrix(self, *args)
    def ToMatrix(self, *args): return _Base.Quaterniond_ToMatrix(self, *args)
    def ToEuler(self, *args): return _Base.Quaterniond_ToEuler(self, *args)
    def FromEuler(self, *args): return _Base.Quaterniond_FromEuler(self, *args)
    def RotationArc(self, *args): return _Base.Quaterniond_RotationArc(self, *args)
    def Euler(self, *args): return _Base.Quaterniond_Euler(self, *args)
    def Derivative(self, *args): return _Base.Quaterniond_Derivative(self, *args)
    def AngularVelocity(self, *args): return _Base.Quaterniond_AngularVelocity(self, *args)
    def __getitem__(self, *args): return _Base.Quaterniond___getitem__(self, *args)
    def __setitem__(self, *args): return _Base.Quaterniond___setitem__(self, *args)
    def __add__(self, *args): return _Base.Quaterniond___add__(self, *args)
    def __sub__(self, *args): return _Base.Quaterniond___sub__(self, *args)
    def __mul__(self, *args): return _Base.Quaterniond___mul__(self, *args)
    def transform(self, *args): return _Base.Quaterniond_transform(self, *args)
    def setV(self, *args): return _Base.Quaterniond_setV(self, *args)
    def getV(self): return _Base.Quaterniond_getV(self)
    __swig_destroy__ = _Base.delete_Quaterniond
    __del__ = lambda self : None;
Quaterniond_swigregister = _Base.Quaterniond_swigregister
Quaterniond_swigregister(Quaterniond)

def Quaterniond_Rot(*args):
  return _Base.Quaterniond_Rot(*args)
Quaterniond_Rot = _Base.Quaterniond_Rot


def dot(*args):
  return _Base.dot(*args)
dot = _Base.dot

def interpolate(*args):
  return _Base.interpolate(*args)
interpolate = _Base.interpolate
class Posed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Posed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Posed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _Base.Posed_w_set
    __swig_getmethods__["w"] = _Base.Posed_w_get
    if _newclass:w = _swig_property(_Base.Posed_w_get, _Base.Posed_w_set)
    __swig_setmethods__["x"] = _Base.Posed_x_set
    __swig_getmethods__["x"] = _Base.Posed_x_get
    if _newclass:x = _swig_property(_Base.Posed_x_get, _Base.Posed_x_set)
    __swig_setmethods__["y"] = _Base.Posed_y_set
    __swig_getmethods__["y"] = _Base.Posed_y_get
    if _newclass:y = _swig_property(_Base.Posed_y_get, _Base.Posed_y_set)
    __swig_setmethods__["z"] = _Base.Posed_z_set
    __swig_getmethods__["z"] = _Base.Posed_z_get
    if _newclass:z = _swig_property(_Base.Posed_z_get, _Base.Posed_z_set)
    __swig_setmethods__["px"] = _Base.Posed_px_set
    __swig_getmethods__["px"] = _Base.Posed_px_get
    if _newclass:px = _swig_property(_Base.Posed_px_get, _Base.Posed_px_set)
    __swig_setmethods__["py"] = _Base.Posed_py_set
    __swig_getmethods__["py"] = _Base.Posed_py_get
    if _newclass:py = _swig_property(_Base.Posed_py_get, _Base.Posed_py_set)
    __swig_setmethods__["pz"] = _Base.Posed_pz_set
    __swig_getmethods__["pz"] = _Base.Posed_pz_get
    if _newclass:pz = _swig_property(_Base.Posed_pz_get, _Base.Posed_pz_set)
    def clear(self): return _Base.Posed_clear(self)
    def norm(self): return _Base.Posed_norm(self)
    def square(self): return _Base.Posed_square(self)
    def resize(self, *args): return _Base.Posed_resize(self, *args)
    def size(self): return _Base.Posed_size(self)
    def unit(self): return _Base.Posed_unit(self)
    def unitize(self): return _Base.Posed_unitize(self)
    def Inv(self): return _Base.Posed_Inv(self)
    __swig_getmethods__["Unit"] = lambda x: _Base.Posed_Unit
    if _newclass:Unit = staticmethod(_Base.Posed_Unit)
    __swig_getmethods__["Trn"] = lambda x: _Base.Posed_Trn
    if _newclass:Trn = staticmethod(_Base.Posed_Trn)
    __swig_getmethods__["Rot"] = lambda x: _Base.Posed_Rot
    if _newclass:Rot = staticmethod(_Base.Posed_Rot)
    def FromAffine(self, *args): return _Base.Posed_FromAffine(self, *args)
    def ToAffine(self, *args): return _Base.Posed_ToAffine(self, *args)
    def __init__(self, *args): 
        this = _Base.new_Posed(*args)
        try: self.this.append(this)
        except: self.this = this
    def transform(self, *args): return _Base.Posed_transform(self, *args)
    def __mul__(self, *args): return _Base.Posed___mul__(self, *args)
    def setPos(self, *args): return _Base.Posed_setPos(self, *args)
    def getPos(self): return _Base.Posed_getPos(self)
    def setOri(self, *args): return _Base.Posed_setOri(self, *args)
    def getOri(self): return _Base.Posed_getOri(self)
    __swig_destroy__ = _Base.delete_Posed
    __del__ = lambda self : None;
Posed_swigregister = _Base.Posed_swigregister
Posed_swigregister(Posed)

def Posed_Unit(*args):
  return _Base.Posed_Unit(*args)
Posed_Unit = _Base.Posed_Unit

def Posed_Trn(*args):
  return _Base.Posed_Trn(*args)
Posed_Trn = _Base.Posed_Trn

def Posed_Rot(*args):
  return _Base.Posed_Rot(*args)
Posed_Rot = _Base.Posed_Rot

# This file is compatible with both classic and new-style classes.


