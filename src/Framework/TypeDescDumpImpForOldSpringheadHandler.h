//	Do not edit. MakeTypeDescForOldSpringheadHandler.bat will update this file.
	
	Header* pHeader = NULL;
	desc = DBG_NEW UTTypeDesc("Header");
	desc->size = sizeof(Header);
	desc->access = DBG_NEW UTAccess<Header>;
	field = desc->AddField("", "int", "major", "");
	field->offset = int((char*)&(pHeader->major) - (char*)pHeader);
	field = desc->AddField("", "int", "minor", "");
	field->offset = int((char*)&(pHeader->minor) - (char*)pHeader);
	field = desc->AddField("", "int", "flags", "");
	field->offset = int((char*)&(pHeader->flags) - (char*)pHeader);
	db->RegisterDesc(desc);
	
	Frame* pFrame = NULL;
	desc = DBG_NEW UTTypeDesc("Frame");
	desc->size = sizeof(Frame);
	desc->access = DBG_NEW UTAccess<Frame>;
	db->RegisterDesc(desc);
	
	FrameTransformMatrix* pFrameTransformMatrix = NULL;
	desc = DBG_NEW UTTypeDesc("FrameTransformMatrix");
	desc->size = sizeof(FrameTransformMatrix);
	desc->access = DBG_NEW UTAccess<FrameTransformMatrix>;
	field = desc->AddField("", "Affinef", "matrix", "");
	field->offset = int((char*)&(pFrameTransformMatrix->matrix) - (char*)pFrameTransformMatrix);
	db->RegisterDesc(desc);
	
	Light8* pLight8 = NULL;
	desc = DBG_NEW UTTypeDesc("Light8");
	desc->size = sizeof(Light8);
	desc->access = DBG_NEW UTAccess<Light8>;
	field = desc->AddField("XLightType", "enum", "type",  "");
	field->AddEnumConst("XLIGHT_POINT", 1);
	field->AddEnumConst("XLIGHT_SPOT", 2);
	field->AddEnumConst("XLIGHT_DIRECTIONAL", 3);
	field->offset = int((char*)(&pLight8->type) - (char*)pLight8);
	field = desc->AddField("", "Vec4f", "diffuse", "");
	field->offset = int((char*)&(pLight8->diffuse) - (char*)pLight8);
	field = desc->AddField("", "Vec4f", "specular", "");
	field->offset = int((char*)&(pLight8->specular) - (char*)pLight8);
	field = desc->AddField("", "Vec4f", "ambient", "");
	field->offset = int((char*)&(pLight8->ambient) - (char*)pLight8);
	field = desc->AddField("", "Vec3f", "position", "");
	field->offset = int((char*)&(pLight8->position) - (char*)pLight8);
	field = desc->AddField("", "Vec3f", "direction", "");
	field->offset = int((char*)&(pLight8->direction) - (char*)pLight8);
	field = desc->AddField("", "float", "range", "");
	field->offset = int((char*)&(pLight8->range) - (char*)pLight8);
	field = desc->AddField("", "float", "falloff", "");
	field->offset = int((char*)&(pLight8->falloff) - (char*)pLight8);
	field = desc->AddField("", "float", "attenuation0", "");
	field->offset = int((char*)&(pLight8->attenuation0) - (char*)pLight8);
	field = desc->AddField("", "float", "attenuation1", "");
	field->offset = int((char*)&(pLight8->attenuation1) - (char*)pLight8);
	field = desc->AddField("", "float", "attenuation2", "");
	field->offset = int((char*)&(pLight8->attenuation2) - (char*)pLight8);
	field = desc->AddField("", "float", "spotInner", "");
	field->offset = int((char*)&(pLight8->spotInner) - (char*)pLight8);
	field = desc->AddField("", "float", "spotCutoff", "");
	field->offset = int((char*)&(pLight8->spotCutoff) - (char*)pLight8);
	db->RegisterDesc(desc);
	
	Material* pMaterial = NULL;
	desc = DBG_NEW UTTypeDesc("Material");
	desc->size = sizeof(Material);
	desc->access = DBG_NEW UTAccess<Material>;
	field = desc->AddField("", "Vec4f", "face", "");
	field->offset = int((char*)&(pMaterial->face) - (char*)pMaterial);
	field = desc->AddField("", "float", "power", "");
	field->offset = int((char*)&(pMaterial->power) - (char*)pMaterial);
	field = desc->AddField("", "Vec3f", "specular", "");
	field->offset = int((char*)&(pMaterial->specular) - (char*)pMaterial);
	field = desc->AddField("", "Vec3f", "emissive", "");
	field->offset = int((char*)&(pMaterial->emissive) - (char*)pMaterial);
	db->RegisterDesc(desc);
	
	MeshFace* pMeshFace = NULL;
	desc = DBG_NEW UTTypeDesc("MeshFace");
	desc->size = sizeof(MeshFace);
	desc->access = DBG_NEW UTAccess<MeshFace>;
	field = desc->AddField("", "int", "nFaceVertexIndices", "");
	field->offset = int((char*)&(pMeshFace->nFaceVertexIndices) - (char*)pMeshFace);
	field = desc->AddField("vector", "int", "faceVertexIndices", "");
	field->offset = int((char*)&(pMeshFace->faceVertexIndices) - (char*)pMeshFace);
	db->RegisterDesc(desc);
	
	Mesh* pMesh = NULL;
	desc = DBG_NEW UTTypeDesc("Mesh");
	desc->size = sizeof(Mesh);
	desc->access = DBG_NEW UTAccess<Mesh>;
	field = desc->AddField("", "int", "nVertices", "");
	field->offset = int((char*)&(pMesh->nVertices) - (char*)pMesh);
	field = desc->AddField("vector", "Vec3f", "vertices", "");
	field->offset = int((char*)&(pMesh->vertices) - (char*)pMesh);
	field = desc->AddField("", "int", "nFaces", "");
	field->offset = int((char*)&(pMesh->nFaces) - (char*)pMesh);
	field = desc->AddField("vector", "MeshFace", "faces", "");
	field->offset = int((char*)&(pMesh->faces) - (char*)pMesh);
	db->RegisterDesc(desc);
	
	MeshNormals* pMeshNormals = NULL;
	desc = DBG_NEW UTTypeDesc("MeshNormals");
	desc->size = sizeof(MeshNormals);
	desc->access = DBG_NEW UTAccess<MeshNormals>;
	field = desc->AddField("", "int", "nNormals", "");
	field->offset = int((char*)&(pMeshNormals->nNormals) - (char*)pMeshNormals);
	field = desc->AddField("vector", "Vec3f", "normals", "");
	field->offset = int((char*)&(pMeshNormals->normals) - (char*)pMeshNormals);
	field = desc->AddField("", "int", "nFaceNormals", "");
	field->offset = int((char*)&(pMeshNormals->nFaceNormals) - (char*)pMeshNormals);
	field = desc->AddField("vector", "MeshFace", "faceNormals", "");
	field->offset = int((char*)&(pMeshNormals->faceNormals) - (char*)pMeshNormals);
	db->RegisterDesc(desc);
	
	MeshMaterialList* pMeshMaterialList = NULL;
	desc = DBG_NEW UTTypeDesc("MeshMaterialList");
	desc->size = sizeof(MeshMaterialList);
	desc->access = DBG_NEW UTAccess<MeshMaterialList>;
	field = desc->AddField("", "int", "nMaterials", "");
	field->offset = int((char*)&(pMeshMaterialList->nMaterials) - (char*)pMeshMaterialList);
	field = desc->AddField("", "int", "nFaceIndexes", "");
	field->offset = int((char*)&(pMeshMaterialList->nFaceIndexes) - (char*)pMeshMaterialList);
	field = desc->AddField("vector", "int", "faceIndexes", "");
	field->offset = int((char*)&(pMeshMaterialList->faceIndexes) - (char*)pMeshMaterialList);
	db->RegisterDesc(desc);
	
	TextureFilename* pTextureFilename = NULL;
	desc = DBG_NEW UTTypeDesc("TextureFilename");
	desc->size = sizeof(TextureFilename);
	desc->access = DBG_NEW UTAccess<TextureFilename>;
	field = desc->AddField("", "string", "filename", "");
	field->offset = int((char*)&(pTextureFilename->filename) - (char*)pTextureFilename);
	db->RegisterDesc(desc);
	
	MeshTextureCoords* pMeshTextureCoords = NULL;
	desc = DBG_NEW UTTypeDesc("MeshTextureCoords");
	desc->size = sizeof(MeshTextureCoords);
	desc->access = DBG_NEW UTAccess<MeshTextureCoords>;
	field = desc->AddField("", "int", "nTextureCoords", "");
	field->offset = int((char*)&(pMeshTextureCoords->nTextureCoords) - (char*)pMeshTextureCoords);
	field = desc->AddField("vector", "Vec2f", "textureCoords", "");
	field->offset = int((char*)&(pMeshTextureCoords->textureCoords) - (char*)pMeshTextureCoords);
	db->RegisterDesc(desc);
	
	Scene* pScene = NULL;
	desc = DBG_NEW UTTypeDesc("Scene");
	desc->size = sizeof(Scene);
	desc->access = DBG_NEW UTAccess<Scene>;
	db->RegisterDesc(desc);
	
	Simulator* pSimulator = NULL;
	desc = DBG_NEW UTTypeDesc("Simulator");
	desc->size = sizeof(Simulator);
	desc->access = DBG_NEW UTAccess<Simulator>;
	field = desc->AddField("", "double", "timeStep", "");
	field->offset = int((char*)&(pSimulator->timeStep) - (char*)pSimulator);
	field = desc->AddField("", "double", "decay", "");
	field->offset = int((char*)&(pSimulator->decay) - (char*)pSimulator);
	db->RegisterDesc(desc);
	
	Camera* pCamera = NULL;
	desc = DBG_NEW UTTypeDesc("Camera");
	desc->size = sizeof(Camera);
	desc->access = DBG_NEW UTAccess<Camera>;
	field = desc->AddField("", "Affinef", "view", "");
	field->offset = int((char*)&(pCamera->view) - (char*)pCamera);
	field = desc->AddField("", "float", "width", "");
	field->offset = int((char*)&(pCamera->width) - (char*)pCamera);
	field = desc->AddField("", "float", "height", "");
	field->offset = int((char*)&(pCamera->height) - (char*)pCamera);
	field = desc->AddField("", "float", "offsetX", "");
	field->offset = int((char*)&(pCamera->offsetX) - (char*)pCamera);
	field = desc->AddField("", "float", "offsetY", "");
	field->offset = int((char*)&(pCamera->offsetY) - (char*)pCamera);
	field = desc->AddField("", "float", "front", "");
	field->offset = int((char*)&(pCamera->front) - (char*)pCamera);
	field = desc->AddField("", "float", "back", "");
	field->offset = int((char*)&(pCamera->back) - (char*)pCamera);
	db->RegisterDesc(desc);
	
	Solid* pSolid = NULL;
	desc = DBG_NEW UTTypeDesc("Solid");
	desc->size = sizeof(Solid);
	desc->access = DBG_NEW UTAccess<Solid>;
	field = desc->AddField("", "float", "mass", "");
	field->offset = int((char*)&(pSolid->mass) - (char*)pSolid);
	field = desc->AddField("", "Matrix3f", "inertia", "");
	field->offset = int((char*)&(pSolid->inertia) - (char*)pSolid);
	field = desc->AddField("", "Vec3f", "velocity", "");
	field->offset = int((char*)&(pSolid->velocity) - (char*)pSolid);
	field = desc->AddField("", "Vec3f", "angularVelocity", "");
	field->offset = int((char*)&(pSolid->angularVelocity) - (char*)pSolid);
	field = desc->AddField("", "Vec3f", "center", "");
	field->offset = int((char*)&(pSolid->center) - (char*)pSolid);
	db->RegisterDesc(desc);
	
	PhysicalMaterial* pPhysicalMaterial = NULL;
	desc = DBG_NEW UTTypeDesc("PhysicalMaterial");
	desc->size = sizeof(PhysicalMaterial);
	desc->access = DBG_NEW UTAccess<PhysicalMaterial>;
	field = desc->AddField("", "float", "ns", "");
	field->offset = int((char*)&(pPhysicalMaterial->ns) - (char*)pPhysicalMaterial);
	field = desc->AddField("", "float", "nd", "");
	field->offset = int((char*)&(pPhysicalMaterial->nd) - (char*)pPhysicalMaterial);
	field = desc->AddField("", "float", "fs", "");
	field->offset = int((char*)&(pPhysicalMaterial->fs) - (char*)pPhysicalMaterial);
	field = desc->AddField("", "float", "fd", "");
	field->offset = int((char*)&(pPhysicalMaterial->fd) - (char*)pPhysicalMaterial);
	field = desc->AddField("", "float", "s", "");
	field->offset = int((char*)&(pPhysicalMaterial->s) - (char*)pPhysicalMaterial);
	field = desc->AddField("", "float", "d", "");
	field->offset = int((char*)&(pPhysicalMaterial->d) - (char*)pPhysicalMaterial);
	db->RegisterDesc(desc);
	
	SolidContainer* pSolidContainer = NULL;
	desc = DBG_NEW UTTypeDesc("SolidContainer");
	desc->size = sizeof(SolidContainer);
	desc->access = DBG_NEW UTAccess<SolidContainer>;
	db->RegisterDesc(desc);
	
	GravityEngine* pGravityEngine = NULL;
	desc = DBG_NEW UTTypeDesc("GravityEngine");
	desc->size = sizeof(GravityEngine);
	desc->access = DBG_NEW UTAccess<GravityEngine>;
	field = desc->AddField("", "Vec3f", "gravity", "");
	field->offset = int((char*)&(pGravityEngine->gravity) - (char*)pGravityEngine);
	db->RegisterDesc(desc);
	
	ContactEngine* pContactEngine = NULL;
	desc = DBG_NEW UTTypeDesc("ContactEngine");
	desc->size = sizeof(ContactEngine);
	desc->access = DBG_NEW UTAccess<ContactEngine>;
	db->RegisterDesc(desc);
	
	JointEngine* pJointEngine = NULL;
	desc = DBG_NEW UTTypeDesc("JointEngine");
	desc->size = sizeof(JointEngine);
	desc->access = DBG_NEW UTAccess<JointEngine>;
	db->RegisterDesc(desc);
	
	Joint* pJoint = NULL;
	desc = DBG_NEW UTTypeDesc("Joint");
	desc->size = sizeof(Joint);
	desc->access = DBG_NEW UTAccess<Joint>;
	field = desc->AddField("", "int", "nType", "");
	field->offset = int((char*)&(pJoint->nType) - (char*)pJoint);
	field = desc->AddField("", "Vec3f", "prj", "");
	field->offset = int((char*)&(pJoint->prj) - (char*)pJoint);
	field = desc->AddField("", "Matrix3f", "pRj", "");
	field->offset = int((char*)&(pJoint->pRj) - (char*)pJoint);
	field = desc->AddField("", "Vec3f", "crj", "");
	field->offset = int((char*)&(pJoint->crj) - (char*)pJoint);
	field = desc->AddField("", "Matrix3f", "cRj", "");
	field->offset = int((char*)&(pJoint->cRj) - (char*)pJoint);
	field = desc->AddField("", "float", "fPosition", "");
	field->offset = int((char*)&(pJoint->fPosition) - (char*)pJoint);
	field = desc->AddField("", "float", "fVelocity", "");
	field->offset = int((char*)&(pJoint->fVelocity) - (char*)pJoint);
	field = desc->AddField("", "float", "fMaxTorque", "");
	field->offset = int((char*)&(pJoint->fMaxTorque) - (char*)pJoint);
	field = desc->AddField("", "float", "fMinPosition", "");
	field->offset = int((char*)&(pJoint->fMinPosition) - (char*)pJoint);
	field = desc->AddField("", "float", "fMaxPosition", "");
	field->offset = int((char*)&(pJoint->fMaxPosition) - (char*)pJoint);
	field = desc->AddField("", "int", "nInputType", "");
	field->offset = int((char*)&(pJoint->nInputType) - (char*)pJoint);
	field = desc->AddField("", "float", "fInput", "");
	field->offset = int((char*)&(pJoint->fInput) - (char*)pJoint);
	field = desc->AddField("", "float", "fPValue", "");
	field->offset = int((char*)&(pJoint->fPValue) - (char*)pJoint);
	field = desc->AddField("", "float", "fIValue", "");
	field->offset = int((char*)&(pJoint->fIValue) - (char*)pJoint);
	field = desc->AddField("", "float", "fDValue", "");
	field->offset = int((char*)&(pJoint->fDValue) - (char*)pJoint);
	db->RegisterDesc(desc);
	
	Import* pImport = NULL;
	desc = DBG_NEW UTTypeDesc("Import");
	desc->size = sizeof(Import);
	desc->access = DBG_NEW UTAccess<Import>;
	field = desc->AddField("", "string", "file", "");
	field->offset = int((char*)&(pImport->file) - (char*)pImport);
	db->RegisterDesc(desc);
