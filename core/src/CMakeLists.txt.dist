# CMakeLists.txt for Springhead

cmake_minimum_required(VERSION 3.1)
set(SPRINGHEAD_PROJECT_VERSION 1.1.0)

# ------------------------------------------------------------------------------
#  Read project name.
#
if(EXISTS "${CMAKE_SOURCE_DIR}/CMakeSettings.txt")
    message(STATUS "reading \"CMakeSettings.txt\"")
    set(SETTING_FILE "CMakeSettings.txt")
else()
    message(STATUS "reading \"CMakeSettings.txt.dist\"")
    set(SETTING_FILE "CMakeSettings.txt.dist")
endif()
include("${CMAKE_SOURCE_DIR}/${SETTING_FILE}")
message(STATUS "Host System: ${CMAKE_HOST_SYSTEM_NAME}")

# ------------------------------------------------------------------------------
#  Definition of project.
#
set(ProjectVersion ${SPRINGHEAD_PROJECT_VERSION})
project(${ProjectName} VERSION ${ProjectVersion} LANGUAGES CXX)
message(STATUS "Project: ${ProjectName}, Version ${ProjectVersion}")

set(CMAKE_SUPPRESS_REGENERATION true)
set(CMAKE_USE_RELATIVE_PATHS true)

# ------------------------------------------------------------------------------
#  We set top directory of Springhead tree to "TOPDIR".
#
set(TOPDIR "${CMAKE_SOURCE_DIR}/../..")

set(SPR_TOP_DIR  "${TOPDIR}")
set(SPR_CORE_DIR "${TOPDIR}/core")
set(SPR_SRC_DIR  "${TOPDIR}/core/src")
set(SPR_INC_DIR  "${TOPDIR}/core/include")
set(SPR_SWIG_DIR "${TOPDIR}/core/bin/src/swig/msvc")
get_filename_component(TOPDIR ${TOPDIR} ABSOLUTE)
get_filename_component(SPR_TOP_DIR ${SPR_TOP_DIR} ABSOLUTE)
get_filename_component(SPR_SRC_DIR ${SPR_SRC_DIR} ABSOLUTE)
get_filename_component(SPR_INC_DIR ${SPR_INC_DIR} ABSOLUTE)
get_filename_component(SPR_BLD_DIR ${PROJECT_BINARY_DIR} ABSOLUTE)
get_filename_component(SPR_SWIG_DIR ${SPR_SWIG_DIR} ABSOLUTE)
message(STATUS "SPR_TOP_DIR:  [${SPR_TOP_DIR}]")
#message(STATUS "SPR_SRC_DIR:  [${SPR_SRC_DIR}]")
#message(STATUS "SPR_INC_DIR:  [${SPR_INC_DIR}]")
message(STATUS "SPR_BLD_DIR:  [${SPR_BLD_DIR}]")
message(STATUS "SPR_SWIG_DIR: [${SPR_SWIG_DIR}]")

# ------------------------------------------------------------------------------
#  Sytem environment.
#
include("${SPR_CORE_DIR}/make.system.cmake")
message(STATUS "Architecture: ${ARCHITECTURE}")
set(CMAKE_GENERATOR_PLATFORM ${ARCHITECTURE})
message(STATUS "Library type: ${LIBTYPE}")

# ------------------------------------------------------------------------------
#  Read function definitions.
#
include("${SPR_CORE_DIR}/make.func.cmake")

# ------------------------------------------------------------------------------
#  Check if setup file exists.
#
set(SetupFileName ${SPR_SRC_DIR}/setup.conf)
if(EXISTS ${SetupFileName})
    set(SetupExists True)
else()
    set(SetupExists False)
endif()
message(STATUS "SetupFile exists: ${SetupExists}")

# ------------------------------------------------------------------------------
#  Read compiler/linker option file (try to find in following order).
#	(1) File specified by option "-D OPTS=<file>".
#	(2) "${CMAKE_SOURCE_DIR}/CMakeOpts.txt".
#	(3) Default file: "${SPR_SRC_DIR}/CMakeOpts.txt.dist".
#
set(OPTS_FILE_NAME "CMakeOpts.txt")
set(OPTS_FILE "${CMAKE_SOURCE_DIR}/${OPTS_FILE_NAME}")
set(OPTS_DEFAULT_FILE "${SPR_SRC_DIR}/${OPTS_FILE_NAME}.dist")
include_file(OPTS ${OPTS_FILE} ${OPTS_DEFAULT_FILE})

# ------------------------------------------------------------------------------
#  Read setting parameters.
#
include("${CMAKE_SOURCE_DIR}/${SETTING_FILE}")

# ------------------------------------------------------------------------------
#  Merge setting parameters.
#	Additional parameters are already read at the top of this file.
#	We need merge process here.
#
set(DEFINE_MACROS	${DEFINE_MACROS} ${DEFINE_MACROS_ADD})
set(INCLUDE_PATHS	${INCLUDE_PATHS_ADD} ${INCLUDE_PATHS})
set(COMP_FLAGS		${COMP_FLAGS_ADD} ${COMP_FLAGS})
set(LINK_FLAGS		${LINK_FLAGS_ADD} ${LINK_FLAGS})

# ------------------------------------------------------------------------------
#  Read definition of external packages. (try to find in following order).
#	(1) File specified by option "-D CONF=<file>".
#	(2) "${CMAKE_SOURCE_DIR}/CMakeConf.txt".
#	(3) Default file: "${SPR_SRC_DIR}/CMakeConf.txt.dist".
#
set(CONF_FILE_NAME "CMakeConf.txt")
set(CONF_FILE "${CMAKE_SOURCE_DIR}/${CONF_FILE_NAME}")
set(CONF_DEFAULT_FILE "${SPR_SRC_DIR}/${CONF_FILE_NAME}.dist")
include_file(CONF ${CONF_FILE} ${CONF_DEFAULT_FILE})

# ------------------------------------------------------------------------------
#  Find external packages if specified.
#
if(DEFINED CMAKE_PREFIX_PATH)
    message(STATUS "CMAKE_PREFIX_PATH:")
    foreach(path IN LISTS CMAKE_PREFIX_PATH)
	message("       ${path}")
    endforeach()
    #
    message("finding package: Boost")
    cmake_policy(SET CMP0074 NEW)
    find_package(Boost REQUIRED)
    if(Boost_FOUND)
	message(STATUS "Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
    else()
	message("** Boost NOT FOUND")
	return()
    endif()
    #
    message("finding package: GLEW")
    cmake_policy(SET CMP0074 NEW)
    if(DEFINED GLEW_LIB32_DIR AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x86")
	list(APPEND CMAKE_PREFIX_PATH ${GLEW_LIB32_DIR})
    endif()
    if(DEFINED GLEW_LIB64_DIR AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
	list(APPEND CMAKE_PREFIX_PATH ${GLEW_LIB64_DIR})
    endif()
    find_package(GLEW)
    if(GLEW_FOUND)
	message(STATUS "GLEW_INCLUDE_DIRS: ${GLEW_INCLUDE_DIRS}")
    else()
	message("** GLEW NOT FOUND")
	return()
    endif()
    #
    message("finding package: GLUT")
    cmake_policy(SET CMP0074 NEW)
    find_package(GLUT REQUIRED)
    if(GLUT_FOUND)
	message(STATUS "GLUT_INCLUDE_DIR: ${GLUT_INCLUDE_DIR}")
    else()
	message("** GLUT NOT FOUND")
	return()
    endif()
endif()

# ------------------------------------------------------------------------------
#  Some other definitions.
#
if(Windows)
    set(RunSwigDir ${SPR_SRC_DIR}/RunSwig)
    set(Python ${RunSwigDir}/python_adapter.bat)
    file(TO_NATIVE_PATH "${RunSwigDir}" RunSwigDir)
    file(TO_NATIVE_PATH "${Python}" Python)
    message(STATUS "Visual Studio Version: ${VS_VERSION}")
    set(LIB_SUFFIX_DEBUG   D)
    set(LIB_SUFFIX_RELEASE  )
    set(LIB_SUFFIX_TRACE   T)
elseif(unix)
    set(CMAKE_CXX_COMPILER "${GPP_PATH}/g++")
    set(Python python)
endif()

# ------------------------------------------------------------------------------
#  Definition of last build library type record file.
#
set(LASTBUILD_LIBTYPE_STATIC ${SPR_SRC_DIR}/lastbuilt.static)
set(LASTBUILD_LIBTYPE_SHARED ${SPR_SRC_DIR}/lastbuilt.shared)
if("${LIBTYPE}" STREQUAL "STATIC")
    set(LASTBUILD_LIBTYPE_FILE ${LASTBUILD_LIBTYPE_STATIC})
else()
    set(LASTBUILD_LIBTYPE_FILE ${LASTBUILD_LIBTYPE_SHARED})
endif()

# ------------------------------------------------------------------------------
#  Define depending projects.
#
set(SPR_PROJS Base Collision Creature FileIO Foundation Framework Graphics
	      HumanInterface Physics)
#
set(DEP_Base)
set(DEP_Collision Foundation)
set(DEP_Creature Foundation Framework Physics)
set(DEP_FileIO Foundation)
set(DEP_Foundation Base)
set(DEP_Framework FileIO Foundation Graphics Physics)
set(DEP_Graphics Foundation)
set(DEP_HumanInterface Foundation)
set(DEP_Physics Collision Foundation)
add_subdirectory(${SPR_SRC_DIR}/RunSwig ${SPR_BLD_DIR}/RunSwig)
foreach(proj IN ITEMS ${SPR_PROJS})
    add_subdirectory(${SPR_SRC_DIR}/${proj} ${SPR_BLD_DIR}/${proj})
    set(DEP_LIST RunSwig)
    foreach(dep IN ITEMS ${DEP_${proj}})
	list(APPEND DEP_LIST ${dep})
    endforeach()
    add_dependencies(${proj} ${DEP_LIST})
    #message("   dependencies: ${proj} => ${DEP_LIST}")
endforeach()
if(EXISTS "setup.conf")
    message("** setup.conf exists")
else()
    if(Windows)
	# Building swig is no more needed on Windows.
	#
	#set(INCLUDED_BY_SPRLIB true)
	#add_subdirectory(${SPR_SWIG_DIR} ${SPR_BLD_DIR}/swig)
	#add_dependencies(RunSwig swig_install)
	#add_dependencies(swig_install swig)
    elseif(unix)
	set(SPR_SWIG_DIR "${TOPDIR}/core/bin/src/swig")
	add_custom_target(genswig ALL
	    COMMAND make -s -f Makefile.autogen
	    WORKING_DIRECTORY ${SPR_SWIG_DIR}
	    COMMENT [[  checking/generating swig binary... ]]
	)
	add_dependencies(RunSwig genswig)
    endif()
endif()

# ------------------------------------------------------------------------------
#  Main target.
#
set(RealTarget integrate)
if(Windows)
    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${RealTarget})
endif()
set(OUTDIR_BASE ${SPR_TOP_DIR}/generated/lib)
if(Windows)
    set(_platform ${CMAKE_GENERATOR_PLATFORM})
    set(LIB_SUFFIX lib)
    foreach(_tmp ${CMAKE_CONFIGURATION_TYPES})
	string(TOUPPER ${_tmp} _conf)
	set(LIBBASE_${_conf} ${VS_VERSION}${LIB_SUFFIX_${_conf}}${_platform})
	set(LIBCMND_${_conf} SpringheadLib.bat ${_platform} ${LIBBASE_${_conf}})
	set(LIBNAME_${_conf} ${ProjectName}${LIBBASE_${_conf}}.${LIB_SUFFIX})
    endforeach() 
elseif(unix)
    if("${LIBTYPE}" STREQUAL "STATIC")
	set(_lib_suffix a)
    else()
	set(_lib_suffix so)
    endif()
    # suffix will be given later
    set(LIBNAME lib${ProjectName})
endif()

# ------------------------------------------------------------------------------
#  Generate Springhead Library.
#
if(Windows)
    if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
	set(LIBDIR ${SPR_TOP_DIR}/generated/lib/win64)
    else ()
	set(LIBDIR ${SPR_TOP_DIR}/generated/lib/win32)
    endif()
elseif(unix)
    set(LIBDIR ${SPR_TOP_DIR}/generated/lib)
endif()

if(Windows)
    add_custom_target(${RealTarget} ALL
	COMMAND if "'$(Configuration)'" equ "'Debug'"   ${LIBCMND_DEBUG}
	COMMAND if "'$(Configuration)'" equ "'Release'" ${LIBCMND_RELEASE}
	COMMAND if "'$(Configuration)'" equ "'Trace'"   ${LIBCMND_TRACE}
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	DEPENDS ${SPR_PROJS}
	COMMENT [[  generating Springhead Library... ]]
    )
elseif(unix)
    set(_outdir ${SPR_SRC_DIR})
    set(_gendir ${SPR_TOP_DIR}/generated/lib)
    set(_makefile ./Makefile.SpringheadLib)
    list(JOIN SPR_PROJS "@" _members)
    set(_cmnd ./SpringheadLib.sh)
    add_custom_target(${RealTarget} ALL
	COMMAND mkdir -p ${_outdir}
	COMMAND make -f ${_makefile} LIBTYPE=${LIBTYPE} BUILDDIR=${SPR_BLD_DIR} OUTDIR=${_outdir} LIBNAME=${LIBNAME} MEMBERS="${_members}"
	COMMAND mkdir -p ${_gendir}
	COMMAND cp ${_outdir}/${LIBNAME}.${_lib_suffix} ${_gendir}
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	DEPENDS ${SPR_PROJS}
	COMMENT [[  generating Springhead Library... ]]
    )
endif()

# 仮のターゲット
set(Target ${ProjectName})			# 仮のターゲットの定義
set(DUMMY_OUT_DIR ${CMAKE_BINARY_DIR}/dummy)	# 仮の生成物の置き場所
file(MAKE_DIRECTORY ${DUMMY_OUT_DIR})

set(DummySrcFile ${DUMMY_OUT_DIR}/_cmake_export_dummy.cpp) # ダミーソース
file(TOUCH ${DummySrcFile})
set(SRCS ${DummySrcFile})
add_library(${Target} ${LIBTYPE} ${SRCS})	# 仮のライブラリの生成
add_dependencies(${Target} ${RealTarget})
target_include_directories(${Target} INTERFACE
    $<BUILD_INTERFACE:${SPR_INC_DIR}>
    $<INSTALL_INTERFACE:${SPR_HEADERS_INSTALL_DIR}>
)
if(Windows)
    set_target_properties(${Target} PROPERTIES
	OUTPUT_NAME_DEBUG	  ${ProjectName}${LIBBASE_DEBUG}
	OUTPUT_NAME_RELEASE	  ${ProjectName}${LIBBASE_RELEASE}
	OUTPUT_NAME_TRACE	  ${ProjectName}${LIBBASE_TRACE}
	ARCHIVE_OUTPUT_DIRECTORY_DEBUG	  ${DUMMY_OUT_DIR}/Debug
	ARCHIVE_OUTPUT_DIRECTORY_RELEASE  ${DUMMY_OUT_DIR}/Release
	ARCHIVE_OUTPUT_DIRECTORY_TRACE	  ${DUMMY_OUT_DIR}/Trace
    )	
    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${ProjectName})
elseif(unix)
    set_target_properties(${Target} PROPERTIES
	OUTPUT_NAME		  ${ProjectName}
	ARCHIVE_OUTPUT_DIRECTORY  ${DUMMY_OUT_DIR}
    )	
endif()
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${Target})

# ------------------------------------------------------------------------------
#  Install (for OLDER VERSION).
#	*** This section remains only for compatibility with older version. ***
#	*** Following directives are now replaced by CMAKE_INSTALL_PREFIX.  ***
#	***	SPRINGHEAD_INCLUDE_PREFIX				    ***
#	***	SPRINGHEAD_LIBRARY_DIR, SPRINGHEAD_LIBRARY_DIR_<CONFIG>	    ***
#
set(OLDER_INSTALLATION_DIRECTIVE False)
if(Windows)
    if(DEFINED SPRINGHEAD_INCLUDE_PREFIX
	    OR DEFINED SPRINGHEAD_LIBRARY_DIR_DEBUG
	    OR DEFINED SPRINGHEAD_LIBRARY_DIR_RELEASE)
	set(OLDER_INSTALLATION_DIRECTIVE True)
    endif()
elseif(unix)
    if(DEFINED SPRINGHEAD_INCLUDE_PREFIX
	    OR DEFINED SPRINGHEAD_LIBRARY_DIR)
	set(OLDER_INSTALLATION_DIRECTIVE True)
    endif()
endif()
if(${OLDER_INSTALLATION_DIRECTIVE})
    message("** OLDER INSTALLATION DIRECTIVE FOUND")
    if(DEFINED SPRINGHEAD_INCLUDE_PREFIX)
	message("** install headers: ${SPRINGHEAD_INCLUDE_PREFIX}")
	file(GLOB HEADERS ${SPR_INC_DIR}/*.h)
	install(FILES ${HEADERS}
		DESTINATION ${SPRINGHEAD_INCLUDE_PREFIX}
		PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
	)
	foreach(_proj ${SPR_PROJS})
	    file(GLOB HEADERS ${SPR_INC_DIR}/${_proj}/*.h)
	    install(FILES ${HEADERS}
		    DESTINATION ${SPRINGHEAD_INCLUDE_PREFIX}/${_proj}
		    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
    	    )
	endforeach()
    endif()
    if(Windows)
	if(DEFINED SPRINGHEAD_LIBRARY_DIR_DEBUG)
	    message("** install library: ${SPRINGHEAD_LIBRARY_DIR_DEBUG} (Debug)")
	    install(FILES ${LIBDIR}/${LIBNAME_DEBUG}
		    DESTINATION ${SPRINGHEAD_LIBRARY_DIR_DEBUG}
		    CONFIGURATIONS Debug
		    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
	    )
	endif()
	if(DEFINED SPRINGHEAD_LIBRARY_DIR_RELEASE)
	    message("** install library: ${SPRINGHEAD_LIBRARY_DIR_RELEASE} (Release)")
	    install(FILES ${LIBDIR}/${LIBNAME_RELEASE}
		    DESTINATION ${SPRINGHEAD_LIBRARY_DIR_RELEASE}
		    CONFIGURATIONS Release
		    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
	    )
	endif()
    elseif(unix)
	if(DEFINED SPRINGHEAD_LIBRARY_DIR)
	    install(FILES ${LIBDIR}/${LIBNAME}.${_lib_suffix}
		    DESTINATION ${SPRINGHEAD_LIBRARY_DIR}
		    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
	    )
	endif()
    endif()
endif()	# ${OLDER_INSTALLATION_DIRECTIVE}

# ------------------------------------------------------------------------------
#  Do not make INSTALL target if
#	DO_NOT_GENERATE_INSTALL_TARGET is defined, or
#	CMAKE_INSTALL_PREFIX is not defined, or
#	CMAKE_INSTALL_PREFIX is defind but empty.
#
if(DO_NOT_GENERATE_INSTALL_TARGET
	OR OLDER_INSTALLATION_DIRECTIVE
	OR NOT CMAKE_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX ${EMPTY} CACHE STRING "set empty" FORCE)
    return()
endif()

# ------------------------------------------------------------------------------
#  Install.
#
#  Cmake の export は、add_liibrary/add_executable で定義されたターゲットに
#  対してでないと機能しないようです (configureでエラーとなる)。
#  そのため、以下のような小細工をしています。
#   (1)	仮のライブラリを作成するターゲット "Springhead" を新たに作成する。
#   (2)	従来 add_custom_target で作成していたターゲット "Springhead" の名前を
#	"integrate" と変更する。各プロジェクトで作成した .lib を統合して
#	Springhhead*.lib を作成する作業は、従来どおりこのターゲットで行なう。
#   (3)	仮のターゲットで生成するファイルは "${CMAKE_BINARY_DIR}/dummy" の下に
#	置く。ただし生成するライブラリファイルの名前は、インストールすべき
#	ライブラリファイルの名前と一致させておく (インストールされるライブラリ
#	はこのターゲットで作成するものなので、こうしておかないといけない)。
#   (4)	仮のターゲットを export する。インストール先は、install directive の
#	属性として指定するだけでよい。ヘッダファイルのインストールは別途
#	install(FILES ...) で指定しないといけない。
#   (5) このままだと、.sln で INSTALL を実行したとき、(3) で生成した仮の
#	ライブラリファイルがインストールされてしまうので、"integrate" で生成
#	した正しいライブラリファイルをインストール先にコピーするための指定
#	install(FILES ...) を定義しておく。
#

# Install先の定義
if(SPR_HEADERS_INSTALL_DIR)
    if(IS_ABSOLUTE ${SPR_HEADERS_INSTALL_DIR})
	set(_dir ${SPR_HEADERS_INSTALL_DIR})
    else()
	set(_dir ${CMAKE_INSTALL_PREFIX}/${SPR_HEADERS_INSTALL_DIR})
    endif()
    file(RELATIVE_PATH SPR_HEADERS_INSTALL_DIR ${CMAKE_INSTALL_PREFIX} ${_dir})
else()
    set(SPR_HEADERS_INSTALL_DIR ${ExportName}/include)
endif()
if(SPR_LIBRARY_INSTALL_DIR)
    if(IS_ABSOLUTE ${SPR_LIBRARY_INSTALL_DIR})
	set(_dir ${SPD_LIBRARY_INSTALL_DIR})
    else()
	set(_dir ${CMAKE_INSTALL_PREFIX}/${SPR_LIBRARY_INSTALL_DIR})
    endif()
    file(RELATIVE_PATH SPR_LIBRARY_INSTALL_DIR ${CMAKE_INSTALL_PREFIX} ${_dir})
else()
    set(SPR_LIBRARY_INSTALL_DIR ${ExportName}/lib)
endif()
message("** install directory: \"${CMAKE_INSTALL_PREFIX}\" (CMAKE_INSTALL_PREFIX)")
message("**      header files: \"${CMAKE_INSTALL_PREFIX}/${SPR_HEADERS_INSTALL_DIR}\"")
message("**      library file: \"${CMAKE_INSTALL_PREFIX}/${SPR_LIBRARY_INSTALL_DIR}\"")
set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING "" FORCE)

# ------------------------------------------------------------------------------
#  Export.
#
set(ExportName ${ProjectName})
set(ExportConf ${ProjectName}Config)
message("** config files:      \"${CMAKE_INSTALL_PREFIX}/${ExportName}/${ExportConf}*.cmake\"")

install(TARGETS ${ProjectName}
	EXPORT ${ExportConf}
	ARCHIVE DESTINATION ${SPR_LIBRARY_INSTALL_DIR}
	LIBRARY DESTINATION ${SPR_LIBRARY_INSTALL_DIR}
)
install(EXPORT ${ExportConf}
	NAMESPACE ${ExportName}::
	DESTINATION ${ExportName}
	FILE ${ExportConf}.cmake
	PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
)
# install header files
file(GLOB HEADERS ${SPR_INC_DIR}/*.h)
install(FILES ${HEADERS}
	DESTINATION ${SPR_HEADERS_INSTALL_DIR}
	PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
)
foreach(_proj ${SPR_PROJS})
    file(GLOB HEADERS ${SPR_INC_DIR}/${_proj}/*.h)
    install(FILES ${HEADERS}
	    DESTINATION ${SPR_HEADERS_INSTALL_DIR}/${_proj}
	    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
    )
endforeach()
# install library file
if(Windows)
    install(FILES ${LIBDIR}/${LIBNAME_DEBUG}
	    DESTINATION ${SPR_LIBRARY_INSTALL_DIR}
	    CONFIGURATIONS Debug
	    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
    )
    install(FILES ${LIBDIR}/${LIBNAME_RELEASE}
	    DESTINATION ${SPR_LIBRARY_INSTALL_DIR}
	    CONFIGURATIONS Release
	    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
    )
    install(FILES ${LIBDIR}/${LIBNAME_TRACE}
	    DESTINATION ${SPR_LIBRARY_INSTALL_DIR}
	    CONFIGURATIONS Trace
	    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
    )
elseif(unix)
    install(FILES ${LIBDIR}/${LIBNAME}.${_lib_suffix}
	    DESTINATION ${SPR_LIBRARY_INSTALL_DIR}
	    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
    )
endif()
# Package version fileの生成
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
	${CMAKE_BINARY_DIR}/${ExportConf}-version.cmake
	${VERSION_CONFIG}
	COMPATIBILITY AnyNewerVersion
)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${ExportConf}-version.cmake
	DESTINATION ${CMAKE_INSTALL_PREFIX}/${ExportName}
	PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
)

# end: CMakeLists.txt
