cmake_minimum_required(VERSION 3.1)

set(Target PHSimpleGL)
set(ProjectName ${Target})
project(${ProjectName} CXX)

# --------------------------------------------------------------
#  Which OS
#
if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
    set(Windows True)
else()
    set(unix True)
endif()

# --------------------------------------------------------------
#  Import Springhead Package
#
set(PackageName Springhead)
if(Windows)
    set(CMAKE_PREFIX_PATH "$ENV{HOME}/EXPORT")
else()
    set(CMAKE_PREFIX_PATH "$ENV{HOME}/EXPORT")
endif()
file(TO_NATIVE_PATH "${CMAKE_PREFIX_PATH}" CMAKE_PREFIX_PATH)

message("finding package: ${PackageName} (${CMAKE_PREFIX_PATH})")
cmake_policy(SET CMP0074 NEW)
find_package(${PackageName} REQUIRED)
if(${PackageName}_FOUND)
    message("-- Package ${PackageName} found")
else()
    message("** ${PackageName} NOT FOUND")
    return()
endif()

# --------------------------------------------------------------
#  Main target
#
file(GLOB SRCS RELATIVE ${CMAKE_SOURCE_DIR} *.cpp *.h)
add_executable(${Target} ${SRCS})
if(Windows)
    target_link_libraries(${Target}
	Springhead::Springhead
    )
else()
    set(CMAKE_CXX_COMPILER "/usr/bin/g++")
    set(CMAKE_CXX_FLAGS	-std=gnu++11)
    target_link_libraries(${Target}
	Springhead::Springhead
	glui glut GLEW GLU GL boost_regex lapack
    )
endif()
set_target_properties(${Target}
    PROPERTIES
    OUTPUT_NAME		${Target}
    DEBUG_OUTPUT_NAME	${Target}D
    RELEASE_OUTPUT_NAME	${Target}
    RUNTIME_OUTPUT_DIRECTORY_DEBUG   "${CMAKE_SOURCE_DIR}"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_SOURCE_DIR}"
)	
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${ProjectName})

# --------------------------------------------------------------
#  Program specific definitions
#
if(Windows)
    get_filename_component(TOPDIR ${CMAKE_SOURCE_DIR}/../../../../.. ABSOLUTE)
    set(SPRSRC ${TOPDIR}/core/src)
    set(DEPENDENCY ${TOPDIR}/dependency)
    target_include_directories(${Target}
	PRIVATE ${SPRSRC}
	PRIVATE ${DEPENDENCY}/src
    )
    message("** add include directory: \"${SPRSRC}\"")
    message("** add include directory: \"${DEPENDENCY}/src\"")
    target_link_directories(${Target}
	PRIVATE ${DEPENDENCY}/lib/win64 ${DEPENDENCY}/lib/win32
    )
    message("** add library directory: \"${DEPENDENCY}/lib/win64\"")
    message("** add library directory: \"${DEPENDENCY}/lib/win32\"")
else()
    get_filename_component(TOPDIR ${CMAKE_SOURCE_DIR}/../../../../.. ABSOLUTE)
    set(SPRSRC ${TOPDIR}/core/src)
    target_include_directories(${Target}
	PRIVATE ${SPRSRC}
    )
    message("** add include directory: \"${SPRSRC}\"")
endif()
